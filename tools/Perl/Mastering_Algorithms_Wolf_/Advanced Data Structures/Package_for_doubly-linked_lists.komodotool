{
  "keyboard_shortcut": "", 
  "name": "Package for doubly-linked lists", 
  "value": [
    "package double;", 
    "", 
    "# $node = double->new($val);", 
    "#", 
    "# Create a new double element with value $val.", 
    "", 
    "sub new {", 
    "\tmy $class = shift;", 
    "\t$class = ref($class) || $class;", 
    "\tmy $self = { val => shift };", 
    "\tbless $self, $class;", 
    "\treturn $self->_link_to($self);", 
    "}", 
    "", 
    "# $elem1->_link_to( $elem2 )", 
    "#", 
    "# Join this node to another, return self.", 
    "# (This is for internal use only, it does not care whether", 
    "# the elements linked are linked into any sort of correct", 
    "# list order.)", 
    "", 
    "sub _link_to {", 
    "\tmy ( $node, $next ) = @_;", 
    "\t$node->next($next);", 
    "\treturn $next->prev($node);", 
    "}", 
    "", 
    "sub destroy {", 
    "\tmy $node = shift;", 
    "\twhile ($node) {", 
    "\t\tmy $next = $node->next;", 
    "\t\t$node->prev(undef);", 
    "\t\t$node->next(undef);", 
    "\t\t$node = $next;", 
    "\t}", 
    "}", 
    "", 
    "# $cur = $node->next", 
    "# $new = $node->next( $new )", 
    "#", 
    "# Get next link, or set ( and return) a new value in next link.", 
    "", 
    "sub next {", 
    "\tmy $node = shift;", 
    "\treturn @_ ? ($node->{next} = shift) : $node->{next};", 
    "}", 
    "", 
    "# $cur = $node->prev", 
    "# $new = $node->prev ($new)", 
    "#", 
    "#\tGet prev link, or set (and return) a new value in prev link.", 
    "sub prev {", 
    "\tmy $node = shift;", 
    "\treturn @_ ? ($node->{prev} = shift) : $node->{prev};", 
    "}", 
    "", 
    "# $elem1->append( $elem2 )", 
    "# $elem->append( $head )", 
    "#", 
    "# Insert the list headed by another node (or by a list) after", 
    "# this node, return self.", 
    "sub append {", 
    "\tmy ( $node, $add ) = @_;", 
    "\tif ( $add = $add->content ) {", 
    "\t\t$add->prev->_link_to( $node->next );", 
    "\t\t$node->_link_to( $add );", 
    "\t}", 
    "\t", 
    "\treturn $node;", 
    "}", 
    "", 
    "# Insert before this node, return self.", 
    "", 
    "sub prepend {", 
    "\tmy ( $node, $add ) = @_;", 
    "\tif ( $add = $add->content ) {", 
    "\t\t$node->prev->_link_to( $add->next );", 
    "\t\t$add->_link_to( $node );", 
    "\t}", 
    "\t", 
    "\treturn $node;", 
    "}", 
    "", 
    "# Content of a node is itself unchanged", 
    "# (needed because for a list head, content must remove all of", 
    "# the elements from the list and return them, leaving the head", 
    "# containing an empty list).", 
    "sub content {", 
    "    return shift;", 
    "}", 
    "", 
    "# Remove one or more nodes from their current list and return the", 
    "# first of them.", 
    "# The caller must ensure that there is still some reference", 
    "# to the remaining other elements.", 
    "sub remove {", 
    "    my $first = shift;", 
    "    my $last = shift || $first;", 
    "    ", 
    "    # Remove it from the old list", 
    "    $first->prev->_link_to( $last->next );", 
    "", 
    "    # Make the extracted nodes a closed circle.", 
    "    $last->_link_to( $first );", 
    "    return $first;", 
    "}!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "indent_relative": "false", 
  "type": "snippet", 
  "treat_as_ejs": "false", 
  "auto_abbreviation": "false"
}