{
  "keyboard_shortcut": "", 
  "name": "Multiplying Matrices", 
  "value": [
    "use PDL;", 
    "# $a and $b are both pdl objects", 
    "$c = $a x $b;", 
    "", 
    "# OR ..", 
    "", 
    "sub mmult {", 
    "\tmy ($m1, $m2) = @_;", 
    "\tmy ($m1rows, $m1cols) = matdim($m1);", 
    "\tmy ($m2rows, $m2cols) = matdim($m2);", 
    "\t", 
    "\tunless ($m1cols == $m2rows) {", 
    "\t\tdie \"IndexError: matrices don't match: $m1cols != $m2rows;\"", 
    "\t}", 
    "\t", 
    "\tmy $result = [];", 
    "\tmy ($i, $j, $k);", 
    "\t", 
    "\tfor $i (range($m1rows)) {", 
    "\t\tfor $j (range($m2cols)) {", 
    "\t\t\tfor $k (range($m1cols)) {", 
    "\t\t\t\t$result->[$i][$j] += $m1->[$i][$k] * $m2->[$k][$j];", 
    "\t\t\t}", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\treturn($result);", 
    "\t", 
    "}", 
    "", 
    "sub range { 0 .. ($_[0] - 1); }", 
    "", 
    "sub veclen {", 
    "\tmy $ary_ref = $_[0];", 
    "\tmy $type = ref $ary_ref;", 
    "\tif ($type ne \"ARRAY\") { die \"$type is bad array ref for $ary_ref\" }", 
    "\treturn scalar(@$ary_ref);", 
    "}", 
    "", 
    "sub matdim {", 
    "\tmy $matrix = $_[0];", 
    "\tmy $rows = veclen($matrix);", 
    "\tmy $cols = veclen($matrix->[0]);", 
    "\treturn($rows, $cols);", 
    "}!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}