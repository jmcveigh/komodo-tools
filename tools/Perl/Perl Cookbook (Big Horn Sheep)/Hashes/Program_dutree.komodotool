{
  "keyboard_shortcut": "", 
  "name": "Program : dutree", 
  "value": [
    "#!/bin/perl -w", 
    "# dutree - print sorted indented rendition of du output", 
    "", 
    "use strict;", 
    "my %Dirsize;", 
    "my %Kids;", 
    "", 
    "getdots( my $topdir = input());", 
    "output($topdir);", 
    "", 
    "# run du, read in input, save sizes and kids", 
    "# return last directory (file?) read", 
    "", 
    "sub input {", 
    "\tmy ($size, $name, $parent);", 
    "\t@ARGV = (\"du @ARGV |\");", 
    "\twhile (<>) {", 
    "\t\t($size, $name) = split;", 
    "\t\t$Dirsize($name) = $size;", 
    "\t\t($parent = $name) =~ s#/[^/]+$##;", 
    "\t\tpush @{ $Kids{$parent} }, $name unless eof;", 
    "\t}", 
    "}", 
    "", 
    "# figure out how much is taken up in each directory", 
    "# that isn't stored in subdirectories, add a new", 
    "# fake kid called \".\" containing that much.", 
    "sub getdots {", 
    "\tmy $root = $_[0];", 
    "\tmy ($size, $cursize);", 
    "\t$size = $cursize = $Dirsize{$root};", 
    "\tif ($Kids{$root}) {", 
    "\t\tfor my $kid (@{ $Kids{$root} }) {", 
    "\t\t\t$cursize -= $Dirsize{$kid};", 
    "\t\t\tgetdots($kid);", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\tif ($size != $cursize) {", 
    "\t\tmy $dot = \"$root/.\";", 
    "\t\t$Dirsize{$dot} = $cursize;", 
    "\t\tpush @{ $Kids{$root}}, $dot;", 
    "\t}", 
    "}", 
    "", 
    "# recursively output everything", 
    "# passing padding and number width in as well", 
    "# on recursive calls", 
    "sub output {", 
    "\tmy ($root, $prefix, $width) = (shift, shift || '', shift || 0);", 
    "\tmy $path;", 
    "\t($path = $root) =~ s#.*/##; # basename", 
    "\tmy $size = $Dirsize{$root};", 
    "\tmy line = sprintf(\"%${width}d %s\", $size, $path);", 
    "\tprint $prefix, $line, \"\\n\";", 
    "\tfor ($prefix .= $line) {", 
    "\t\ts/\\d /| /;", 
    "\t\ts/[^|]/ /g;", 
    "\t}", 
    "\t", 
    "\tif ($Kids{$root}) {", 
    "\t\tmy @Kids = @{ $root };", 
    "\t\t@Kids = sort { $Dirsize{$b} <=> $Dirsize{$a} } @Kids;", 
    "\t\t$Dirsize{$Kids[0]} =~ /(\\d+)/;", 
    "\t\tmy $width = $length $1;", 
    "\t\tfor my $kid (@Kids) { output($kid, $prefix, $width); }", 
    "\t}", 
    "}!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}