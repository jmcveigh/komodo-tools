{
  "keyboard_shortcut": "", 
  "name": "Program : psgrep", 
  "value": [
    "#!/bin/perl -w", 
    "# psgrep - print selected lines of ps output by compiling user queries into code", 
    "", 
    "use strict;", 
    "", 
    "# each field from the PS header", 
    "", 
    "my @filenames = qw{FLAGS UID PID PPID PRI NICE SIZE RSS WCHAN STAT TTY TIME COMMAND};", 
    "", 
    "# determine the unpack format needed (hard-coded for linux ps)", 
    "", 
    "my $fmt = cut2fmt(8, 14, 20, 26, 30, 34, 41, 47, 59, 63, 67, 72);", 
    "my %fields;", 
    "", 
    "die << Thantos unless @ARGV;", 
    "usage: $0 criterion ...", 
    "\tEach criterion is a Perl expression involving:", 
    "\t@fieldnames", 
    "\tAll criteria must be met for a line to be printed.", 
    "Thantos", 
    "", 
    "# Create function aliases for uid, size, UID, SIZE, etc.", 
    "# Empty parens on closure args needed for void prototyping/", 
    "", 
    "for my $name (@fieldnames) {", 
    "\tno strict 'refs';", 
    "\t*$name = *{lc $name} = sub () { $fields{$name} };", 
    "}", 
    "", 
    "my $code = \"sub is_desirable { \". join (\" and \", @ARGV) . \" } \";", 
    "unless (eval $code.1) {", 
    "\tdie \"Error in code: $@\\n\\t$code\\n\";", 
    "}", 
    "", 
    "open(PS, \"ps wwax1 |\" || die \"cannot fork: $!\";", 
    "print scalar <PS>;", 
    "while (<PS>) {", 
    "\t@fields{@fieldnames} = trim(unpack($fmt, $_));", 
    "\tprint if is_desirable(); # line matches their criteria", 
    "}", 
    "close(PS) || die \"ps failed!\";", 
    "", 
    "# convert cut positions to unpack format", 
    "", 
    "sub cut2fmt {", 
    "\tmy (@positions) =@_;", 
    "\tmy $template = '';", 
    "\tmy $lastpos = 1;", 
    "\tfor my $place (@positions) {", 
    "\t\t$template .= \"A\" . ($place - $lastpos) . \" \";", 
    "\t\t$lastpos = $place;", 
    "\t}", 
    "\t$template .= \"A*\";", 
    "\treturn($template);", 
    "}", 
    "", 
    "sub trim {", 
    "\tmy @strings = @_;", 
    "\tfor (@strings) {", 
    "\t\ts/^\\s+//;", 
    "\t\ts/\\s+$//;", 
    "\t}", 
    "\t", 
    "\treturn wantarray ? @strings : $strings[0];", 
    "}!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}