{
  "keyboard_shortcut": "", 
  "name": "OpenGL 2", 
  "value": [
    "#!/usr/local/bin/perl", 
    "", 
    "#", 
    "# The OpenGL code is from Stan Melax - thanks Stan.", 
    "#", 
    "# This Perl/Tk example embeds Stan's code in a Perl/Tk", 
    "# MainWindow.", 
    "#", 
    "#       object oriented programming example", 
    "#", 
    "# Example developed entirely by Stan Melax (stan@arc.ab.ca).", 
    "# I wanted to try some object-oriented programming in perl,", 
    "# but I wanted to do something more real than just a \"foo-bar\" example :-)", 
    "# ", 
    "# I developed the smooth \"chaseing\" behavior used by the spaceship", 
    "# years ago in grad school for a VR assignment.  When Randy Pausch", 
    "# (a VR God from U of Virginia) visited the U of Alberta, he was", 
    "# impressed and took a copy of the algorithm.  ", 
    "#", 
    "", 
    "use OpenGL;", 
    "", 
    "sub abs{", 
    "\t(($_[0]>0)?$_[0]:-$_[0]);", 
    "}", 
    "", 
    "$cow=1;", 
    "$plane=2;", 
    "$floor=3;", 
    "$enterprise=4;", 
    "sub initlists{", 
    "\tglNewList($cow,GL_COMPILE);", 
    "\t    glColor3f(1.0,0.0,0.0);", 
    "\t    glBegin(GL_POLYGON);", 
    "\t      glNormal3f(-1.0,   0.0,  0.0);", 
    "\t      glVertex3f(-1.0 , -1.0, -1.0);", 
    "\t      glVertex3f(-1.0 ,  1.0, -1.0);", 
    "\t      glVertex3f(-1.0 ,  1.0,  1.0);", 
    "\t      glVertex3f(-1.0 , -1.0,  1.0);", 
    "\t    glEnd();", 
    "\t    glColor3f(0.0,1.0,0.0);", 
    "\t    glBegin(GL_POLYGON);", 
    "\t      glNormal3f( 1.0,   0.0,  0.0);", 
    "\t      glVertex3f( 1.0 , -1.0, -1.0);", 
    "\t      glVertex3f( 1.0 ,  1.0, -1.0);", 
    "\t      glVertex3f( 1.0 ,  1.0,  1.0);", 
    "\t      glVertex3f( 1.0 , -1.0,  1.0);", 
    "\t    glEnd();", 
    "\tglEndList();", 
    "", 
    "\tglNewList($plane,GL_COMPILE);", 
    "\t    glColor3f(0,0,0);", 
    "\t    glBegin(GL_POLYGON);", 
    "\t      glVertex3f( 1 ,  2,  1.0);", 
    "\t      glVertex3f( 2 ,  1,  1.0);", 
    "\t      glVertex3f( 2 ,  -1,  1.0);", 
    "\t      glVertex3f( 1 ,  -2,  1.0);", 
    "\t      glVertex3f( -1 ,  -2,  1.0);", 
    "\t      glVertex3f( -2 ,  -1, 1.0);", 
    "\t      glVertex3f( -2 ,  1,  1.0);", 
    "\t      glVertex3f( -1 ,  2,  1.0);", 
    "\t    glEnd();", 
    "\t    glColor3f(1.0,0.0,1.0);", 
    "\t    glBegin(GL_POLYGON);", 
    "\t      glVertex3f( 1 ,  2,  3.0);", 
    "\t      glVertex3f( 2 ,  1,  3.0);", 
    "\t      glVertex3f( 2 ,  -1,  3.0);", 
    "\t      glVertex3f( 1 ,  -2,  3.0);", 
    "\t      glVertex3f( -1 ,  -2,  3.0);", 
    "\t      glVertex3f( -2 ,  -1,  3.0);", 
    "\t      glVertex3f( -2 ,  1,  3.0);", 
    "\t      glVertex3f( -1 ,  2,  3.0);", 
    "\t    glEnd();", 
    "\tglEndList();", 
    "", 
    "\tglNewList($floor,GL_COMPILE);", 
    "\t for($i=0;$i<10;$i++) {", 
    "\t  for($j=0;$j<10;$j++) {", 
    "\t    $b = 1-sqrt(($i-4.5)*($i-4.5)+($j-4.5)*($j-4.5))/6.4;", 
    "\t    glColor3f($b*0.5,(($i%2) ^ ($j%2) )?0.7*$b : 0 ,0);", 
    "\t    glBegin(GL_POLYGON);", 
    "\t      glVertex3f( (0+$i-5)*10 ,  (0+$j-5) *10,  0.0);", 
    "\t      glVertex3f( (1+$i-5)*10 ,  (0+$j-5) *10,  0.0);", 
    "\t      glVertex3f( (1+$i-5)*10 ,  (1+$j-5) *10,  0.0);", 
    "\t      glVertex3f( (0+$i-5)*10 ,  (1+$j-5) *10,  0.0);", 
    "\t    glEnd();", 
    "\t  }", 
    "\t }", 
    "\tglEndList();", 
    "}", 
    "", 
    "sub readnff{", 
    "  open(FILE,\"<spaceship.nff\") || die \"cant open spaceship.nff\";", 
    "  $_=\"\";", 
    "  while(!(/^82\\s*$/)){$_=<FILE>;}", 
    "  $n=82;", 
    "  for($i=0;$i<$n;$i++) {", 
    "    $_=<FILE>;", 
    "    /(\\S+)\\s+(\\S+)\\s+(\\S+)\\s*$/ || die \"couldn't parse file\";", 
    "    ($x[$i],$y[$i],$z[$i])=($1,$2,$3);", 
    "  }", 
    "  $_=<FILE>;", 
    "  /^140/ || die \"couldn't parse file\";", 
    "  $p=140;", 
    "  glNewList($enterprise,GL_COMPILE);", 
    "  glScalef(0.02,0.02,0.02);", 
    "  glRotatef(90.0,0.0,0.0,1.0);", 
    "  glColor3f(0.0,1.0,1.0);", 
    "  for($i=0;$i<$p;$i++) {", 
    "    glBegin(GL_POLYGON);", 
    "    $_=<FILE>;", 
    "    /3\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s/ || die \"couldn't parse file\";", 
    "    glVertex3f($x[$1],$y[$1],$z[$1]);", 
    "    glVertex3f($x[$2],$y[$2],$z[$2]);", 
    "    glVertex3f($x[$3],$y[$3],$z[$3]);", 
    "    glEnd();", 
    "  }", 
    "  close(FILE);", 
    "  glEndList();", 
    "  $enterprise;", 
    "}", 
    "", 
    "package A;", 
    "", 
    "use OpenGL;", 
    "%defaults = (", 
    "\t'name' => 'unnamed',", 
    "\t'x' => 0 ,", 
    "\t'y' => 0 ,", 
    "\t'z' => 0 ,", 
    "\t'dl'=> $main::plane,", 
    ");", 
    "sub initialize {", 
    "\tmy $self=shift;", 
    "\tlocal %v = @_;", 
    "\tforeach $k (keys(%v)) {", 
    "\t\t$self->{$k} = $v{$k};", 
    "\t}", 
    "\t$self;", 
    "}", 
    "", 
    "sub print{", 
    "\tmy $self=shift;", 
    "\tprint \"\\tObject '\",$self->{'name'},\"' is a '\",ref($self),\"'\\n\";", 
    "\tforeach $k (sort keys(%$self)) {", 
    "\t\tprint(\"\\t\\t$k\\t$self->{$k}\\n\") if($k cmp 'name');", 
    "\t}", 
    "\tprint \"\\n\";", 
    "}", 
    "", 
    "sub new {", 
    "\tmy $type = shift;", 
    "\tmy $self = {};", 
    "\tinitialize($self,%defaults);", 
    "\tinitialize($self,@_);", 
    "\tpush(@objects,$self);", 
    "\tbless $self;", 
    "}", 
    "sub move {", 
    "}", 
    "sub draw {", 
    "\tmy $self=shift;", 
    "\tglPushMatrix();", 
    "\tglTranslatef($self->{'x'},$self->{'y'},$self->{'z'});", 
    "\tglCallList($self->{'dl'});", 
    "\tglPopMatrix ();", 
    "}", 
    "", 
    "", 
    "#------------------------------------------", 
    "package B;", 
    "@ISA=qw(A);", 
    "", 
    "%defaults = (", 
    "\t'dx',0,", 
    "\t'dy',0,", 
    "\t'dz',0,", 
    ");", 
    "sub new {", 
    "\tmy $type = shift;", 
    "\tmy $self = new A(%defaults,@_);", 
    "\tpush(@objects,$self);", 
    "\tbless $self;", 
    "}", 
    "", 
    "$WORLD_BOUNDARY =(20.0);", 
    "$WORLD_CEILING  =(10.0);", 
    "$WORLD_FLOOR    =(0.0);", 
    "sub move {", 
    "  my $self = shift;", 
    "  local($x,$y,$z,$dx,$dy,$dz)=", 
    "\t(\\$self->{'x'}, \\$self->{'y'}, \\$self->{'z'},", 
    "         \\$self->{'dx'},\\$self->{'dy'},\\$self->{'dz'});", 
    "  $$x+=$$dx;", 
    "  $$y+=$$dy;", 
    "  $$z+=$$dz;", 
    "  # Bounce off Walls ", 
    "  ($$x>  $WORLD_BOUNDARY) && ($$dx= -abs($$dx));", 
    "  ($$x< -$WORLD_BOUNDARY) && ($$dx=  abs($$dx));", 
    "  ($$y>  $WORLD_BOUNDARY) && ($$dy= -abs($$dy));", 
    "  ($$y< -$WORLD_BOUNDARY) && ($$dy=  abs($$dy));", 
    "  ($$z>  $WORLD_CEILING ) && ($$dz= -abs($$dz));", 
    "  ($$z<  $WORLD_FLOOR   ) && ($$dz=  abs($$dz));", 
    "}", 
    "", 
    "", 
    "#------------------------------------------", 
    "package T;", 
    "@ISA=qw(B);", 
    "%defaults = (", 
    "\t'name','target',", 
    "\t'wait',0,", 
    ");", 
    "$damping = 0.99;", 
    "sub new {", 
    "\tmy $type = shift;", 
    "\tmy $self = new B(%defaults,@_);", 
    "\tpush(@objects,$self);", 
    "\tbless $self;", 
    "}", 
    "sub move {", 
    "\tmy $self = shift;", 
    "\t$self->{'dx'} *= $damping;", 
    "\t$self->{'dy'} *= $damping;", 
    "\t$self->{'wait'}-- if($self->{'wait'}>0) ;", 
    "\t$self->B::move;", 
    "}", 
    "sub takeoff {", 
    "\tmy $self = shift;", 
    "\t#print \"takeoff\\n\";", 
    "\treturn if($self->{'wait'}>0) ;", 
    "\t$self->{'dx'} = rand(2)-1.0;", 
    "\t$self->{'dy'} = rand(2)-1.0;", 
    "\t$self->{'wait'}=10;", 
    "}", 
    "#------------------------------------------", 
    "package C;", 
    "@ISA=qw(B);", 
    "use OpenGL;", 
    "", 
    "%defaults = (", 
    "\t'target' => 0,", 
    "\t'h' => 0,", 
    "\t'dh' => 0,", 
    ");", 
    "sub new {", 
    "\tmy $type = shift;", 
    "\tmy $self = new B(%defaults,@_);", 
    "\tpush(@objects,$self);", 
    "\tbless $self;", 
    "}", 
    "$DAMPING \t= (0.98);", 
    "$ACCELLERATION \t= (0.01);", 
    "$BANK_DAMPING \t= (0.8);", 
    "sub move{", 
    "  \tmy $self = shift;", 
    "  \tlocal($x,$y,$z,$dx,$dy,$dz,$h,$dh)=", 
    "\t\t(\\$self->{'x'}, \\$self->{'y'}, \\$self->{'z'},", 
    "        \t \\$self->{'dx'},\\$self->{'dy'},\\$self->{'dz'},", 
    "\t\t \\$self->{'h'},\\$self->{'dh'});", 
    "\tlocal $t  = $self->{'target'};", 
    "\t($t) || die \"No Target\\n\"; ", 
    "\tlocal ($tx,$ty) = ($t->{'x'},$t->{'y'});", 
    "\t", 
    "   \tlocal $theading = atan2($ty-$$y,$tx-$$x);", 
    "\tlocal $speed = sqrt($$dx*$$dx+$$dy*$$dy);", 
    "\t$$h = ($$dy==0.0&&$$dx==0.0)? $$h : atan2($$dy,$$dx);", 
    "\t$tdheading = $theading-$$h;", 
    "\twhile($tdheading > 3.14){ $tdheading -= 2*3.14};", 
    "\twhile($tdheading <-3.14){ $tdheading += 2*3.14};", 
    "\t$$dh*= $BANK_DAMPING; ", 
    "\t$$dh += $tdheading* 0.01;", 
    "\t$$h += $$dh;", 
    "\tif($tdheading <3.14/6 && $tdheading>-3.14/6 ) {", 
    "\t\t$speed += $ACCELLERATION;", 
    "\t}", 
    "    \telsif ($tdheading <3.14/3 && $tdheading>-3.14/3 ) {", 
    "\t\t$speed += $ACCELLERATION/4;", 
    "\t}", 
    "\t$$dx = cos($$h)*$speed;", 
    "\t$$dy = sin($$h)*$speed;", 
    "\t#if( (t%10==0) && tdheading <3.14/6 && tdheading>-3.14/6 ){", 
    "\t#\t# fire();", 
    "\t#}", 
    "\t# damping ", 
    "\t$$dx *= $DAMPING;", 
    "\t$$dy *= $DAMPING;", 
    "\t$$dz *= $DAMPING;", 
    "\t#$self->B::move;", 
    "  \t$$x+=$$dx;", 
    "  \t$$y+=$$dy;", 
    "  \t$$z+=$$dz;", 
    "\t$t->takeoff if($$x > $tx-5 && $$x < $tx+5  &&", 
    "\t   $$y > $ty-5 && $$y < $ty+5 );", 
    "}", 
    "", 
    "sub draw {", 
    "\tmy $self=shift;", 
    "\tglPushMatrix();", 
    "\tglTranslatef($self->{'x'},$self->{'y'},$self->{'z'});", 
    "\tglRotatef($self->{'h'}*180/3.14, 0.0,0.0,1.0);", 
    "\tglRotatef(-60.0 * $self->{'dh'}/(1.0/(1.0-0.8)*0.01*3.14), 1.0, 0.0, 0.0);", 
    "\tglCallList($self->{'dl'});", 
    "\tglPopMatrix ();", 
    "}", 
    "", 
    "#------------------------------------------", 
    "package main;", 
    "", 
    "sub gl_init {", 
    "    glpOpenWindow(", 
    "\t\t  parent=> shift,", 
    "\t\t  width=>400,height=>400,", 
    "\t\t  mask => StructureNotifyMask|KeyPressMask,", 
    "\t\t  attributes=>[GLX_RGBA,GLX_DOUBLEBUFFER]);", 
    "    glShadeModel (GL_FLAT);", 
    "    ", 
    "    glMatrixMode(GL_PROJECTION);", 
    "    glLoadIdentity();", 
    "    glFrustum (-1.0, 1.0, -1.0, 1.0, 1.5, 500.0); ", 
    "    glMatrixMode(GL_MODELVIEW);", 
    "", 
    "    initlists;", 
    "    glColor3f(1,0,0);", 
    "    glClearColor(0,0,0.3,1);", 
    "    ", 
    "    new A('dl'=>$floor,'name'=>'the happy floor');", 
    "    #$a = new A( 'y' => 0.2,  'name' => 'useless dude');", 
    "    $b = new T( 'x' => 10, 'dx'=> 0.4,  'name' => 'bad dude');", 
    "    readnff;", 
    "    $c = new C('z' => 5,'dl'=>$enterprise, 'x' => -10, 'target'=>$b, 'name' => 'killer');", 
    "    $w=100.0;$t= time;$p= $t-1;", 
    "    $rin=$win=$ein='';", 
    "    $spf = 1;", 
    "    $spin=0;", 
    "    ", 
    "    $cb{&ConfigureNotify} = sub { local($e,$w,$h)=@_;glViewport(0,0,$w,$h);", 
    "\t\t\t\t  # print \"viewport $w,$h\\n\";", 
    "\t\t\t      };", 
    "    $cb{&KeyPress} = sub { # print \"@_[1] \",ord(@_[1]),\" keypress @_\\n\";", 
    "\tlocal($ss); &$ss(@_[1]) if ($ss=$kcb{@_[1]}); };", 
    "    $kcb{'q'} = $kcb{'Q'} = $kcb{\"\\033\"} = sub{ print \"Good-Bye\\n\"; exit 0;};", 
    "    sub setspeed{$C::ACCELLERATION =  $_[0]/100;}", 
    "    foreach $i (0..9){", 
    "        $kcb{\"$i\"}=\\&setspeed;", 
    "    }", 
    "    ", 
    "} # end gl_init", 
    "", 
    "use Tk;", 
    "use Tk qw/:eventtypes/;", 
    "", 
    "$mw = MainWindow->new;", 
    "$b = $mw->Button(-text => 'Quit', -command => \\&exit);", 
    "$b->pack;", 
    "$mw->waitVisibility;", 
    "", 
    "$gl = $mw->Toplevel(-width => 400, -height => 400);", 
    "$gl->waitVisibility;", 
    "&gl_init( hex($gl->id) );", 
    "", 
    "", 
    "while( 1 ){ # gl_MainLoop", 
    "", 
    "    $spf = ($spf*$w + $t-$p) /($w+1.0); ", 
    "    $fps = ($spf)?1.0/$spf:0;", 
    "    $p=$t;", 
    "    $t= time;", 
    "    ", 
    "#    while (my $stat = $mw->DoOneEvent( ALL_EVENTS )){}", 
    "#    while (my $stat = $mw->DoOneEvent( DONT_WAIT | ALL_EVENTS )){}", 
    "    $mw->update;", 
    "    ", 
    "    while($p=XPending) {", 
    "\t@e=&glpXNextEvent;", 
    "\t&$s(@e) if($s=$cb{$e[0]});", 
    "    }", 
    "    ", 
    "    ", 
    "    vec($rin,0,1) = 1;", 
    "    if(select($rout=$rin,undef,undef,0)) {", 
    "\t$_=<> || die \"End Of File\";", 
    "\teval;", 
    "    }", 
    "    foreach $x (@A::objects) {", 
    "\t$x->move;", 
    "\t#$x->print;", 
    "    }", 
    "    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);", 
    "    glLoadIdentity ();", 
    "    ", 
    "    # set the viewpoint", 
    "    glTranslatef (0.0, 0.0, -30.0);    ", 
    "    glRotatef(-45.0, 1.0,0.0,0.0);", 
    "    $spin += 1;", 
    "    glRotatef($spin, 0.0,0.0,1.0);", 
    "    ", 
    "    foreach $x (@A::objects) {", 
    "\t$x->draw;", 
    "    }", 
    "    glFlush();", 
    "    glXSwapBuffers;", 
    "", 
    "} # end gl_mainLoop!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}