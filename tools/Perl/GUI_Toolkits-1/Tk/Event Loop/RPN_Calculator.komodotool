{
  "keyboard_shortcut": "", 
  "name": "RPN Calculator", 
  "value": [
    "#!/usr/local/bin/perl -w", 
    "#", 
    "# A cursory (and partial) implementation of the Hewlett Packard 16C", 
    "# Computer Scientist RPN calculator.", 
    "#", 
    "# Stephen.O.Lidie@lehigh.EDU, LUCC, 2001/01/23.", 
    "#", 
    "# Copyright (C) 2001 - 2001 Stephen O. Lidie. All rights reserved.", 
    "#", 
    "# This program is free software; you can redistribute it and/or modify", 
    "# it under the same terms as Perl itself.", 
    "", 
    "# Global variables.", 
    "", 
    "my $BLUE          = 'steelblue1';", 
    "my $BLUE_DARKER   = 'steelblue';", 
    "my $CLRX          = 0;\t\t  # 1 IFF clear X before inserting next key", 
    "my $F_PRESSED     = 0;\t\t  # F-key modifier pressed", 
    "my $G_PRESSED     = 0;\t\t  # G-key modifier pressed", 
    "my $GRAY          = 'gray25';", 
    "my $GRAY_LIGHTER  = 'gray31';", 
    "my $GRAY_LIGHTEST = 'gray40';", 
    "my $HELP;\t\t\t  # help screen Toplevel widget", 
    "my $MAC_PB;                       # Splashscreen MacProgressBar widget", 
    "my $MAC_PB_P      = 0;            # MacProgressBar percent complete", 
    "my $MAC_PB_W      = 300;          # pixel width of MacProgressBar", 
    "my $MODEL         = \"hp\\n--\\n16C\";", 
    "my $ONOFF         = 0;\t\t  # 1 IFF calculator on", 
    "my $ORANGE        = 'orange';", 
    "my $PUSHX         = 0;\t\t  # 1 IFF push X before inserting next key", 
    "my $RCFILE        = $^O eq \"MSWin32\" ? 'C:\\.hp16c' : \"$ENV{HOME}/.hp16c\";", 
    "my $SILVER        = '#ef5bef5bef5b';", 
    "my @STACK         = (0, 0, 0, 0); # standard HP calculator stack", 
    "my $STACKM        = $#STACK;\t  # stack maximum ordinal", 
    "my $XV            = ' ';\t  # current display (X) value", 
    "", 
    "# Composite mega widget Key (we can look like a Python program too).", 
    "", 
    "package Key;", 
    "", 
    "use Tk::widgets qw/Frame/;", 
    "use base qw/Tk::Frame/;", 
    "Construct Tk::Widget 'Key';", 
    "", 
    "sub Populate {", 
    "    my ($self, $args) = @_;", 
    "", 
    "    my $topl = delete $args->{-topl};", 
    "    my $butl = delete $args->{-butl};", 
    "    my $botl = delete $args->{-botl};", 
    "", 
    "    $self->SUPER::Populate($args);", 
    "", 
    "    my (@pl) = qw/-side top -expand yes -fill both/;", 
    "    $self->{topl} = $self->Label(-text  => $topl)->pack(@pl);", 
    "    $self->{topl}->configure(    -image => $topl) if ref($topl);", 
    "", 
    "    $self->{butl} = $self->Button(", 
    "        -text        => $butl,", 
    "        -borderwidth => 2,", 
    "    )->pack(@pl);", 
    "    $self->{butl}->configure(    -image => $butl) if ref($butl);", 
    "", 
    "    $self->{botl} = $self->Label(-text  => $botl)->pack(@pl);", 
    "    $self->{botl}->configure(    -image => $botl) if ref($botl);", 
    "", 
    "    $self->pack(qw/-side left -expand 1 -fill both -padx 3 -pady 3/);", 
    "", 
    "    $self->ConfigSpecs(", 
    "        -background => [qw/METHOD         background background yellow/],", 
    "        -command    => [$self->{butl}, qw/command    Command/,  undef],", 
    "        -foreground => [qw/METHOD         foreground Foreground red/],", 
    "        -font       => [qw/METHOD         font       Font       fixed/],", 
    "        -width      => [qw/METHOD         width      Width      20/],", 
    "        -height     => [$self->{butl}, qw/height     Height     0/],", 
    "    );", 
    "}", 
    "", 
    "sub background {", 
    "    my ($self, $bg) = @_;", 
    "    $self->{topl}->configure(-background => $GRAY_LIGHTER);", 
    "    $self->{butl}->configure(-background => $bg);", 
    "    $self->{botl}->configure(-background => $GRAY_LIGHTER);", 
    "}", 
    "", 
    "sub font {", 
    "    my ($self) = @_;", 
    "    $self->{topl}->configure(-font => [qw/arial  9 bold/]);", 
    "    $self->{butl}->configure(-font => [qw/arial 10 bold/]);", 
    "    $self->{botl}->configure(-font => [qw/arial  9 bold/]);", 
    "}", 
    "", 
    "sub foreground {", 
    "    my ($self) = @_;", 
    "    $self->{topl}->configure(-foreground => $ORANGE);", 
    "    my $text = $self->{butl}->cget(-text);", 
    "    my $fg = ($text =~ /^[fg]{1}$/) ? 'black' : 'white';", 
    "    $self->{butl}->configure(-foreground => $fg);", 
    "    $self->{botl}->configure(-foreground => $BLUE);", 
    "}", 
    "", 
    "sub width {", 
    "    my ($self) = @_;", 
    "    $self->{topl}->configure(-width => 6);", 
    "    $self->{butl}->configure(-width => 3);", 
    "    $self->{botl}->configure(-width => 4);", 
    "}", 
    "", 
    "package Tk;", 
    "", 
    "use Tk::bindDump;", 
    "", 
    "# M A I N", 
    "", 
    "package main;", 
    "", 
    "use Tk;", 
    "use Tk::MacProgressBar;", 
    "use Tk::Splashscreen;", 
    "use Tk::widgets qw/Compound ROText/;", 
    "use subs qw/build_button_rows build_calculator build_help_window end splash/;", 
    "use strict;", 
    "", 
    "my $mw = MainWindow->new;", 
    "$mw->withdraw;", 
    "$mw->title('Hewlett-Packard 16C Computer Scientist RPN Calculator');", 
    "$mw->iconname('HP 16C');", 
    "$mw->configure(-background => $GRAY_LIGHTEST);", 
    "", 
    "my $splash = splash;\t\t# build Splashscreen", 
    "$splash->Splash;\t\t# show Splashscreen", 
    "", 
    "build_help_window;", 
    "build_calculator;", 
    "", 
    "$MAC_PB->set($MAC_PB_P = 100);", 
    "$splash->Destroy;\t\t# tear down Splashscreen", 
    "", 
    "$mw->deiconify;\t\t\t# show calculator", 
    " ", 
    "MainLoop;", 
    "", 
    "# Miscellaneous subroutines.", 
    "", 
    "sub build_button_rows {", 
    "", 
    "    my ($parent, $button_descriptions) = @_;", 
    "", 
    "    foreach my $row (@$button_descriptions) {", 
    "\tmy $frame = $parent->Frame(-background => $GRAY_LIGHTEST);", 
    "\tforeach my $buttons (@$row) {", 
    "\t    my ($p1, $p2, $p3, $color, $func) = @$buttons;", 
    "", 
    "\t    $frame->Key(", 
    "\t\t-topl       => $p2,", 
    "                -butl       => $p1,", 
    "                -botl       => $p3,", 
    "                -background => $color,", 
    "                -command    => $func,", 
    "            );", 
    "\t}", 
    "\t$frame->pack(qw/-side top -expand 1 -fill both/);", 
    "\t$MAC_PB->set($MAC_PB_P += 10);", 
    "    }", 
    "", 
    "} # end build_button_rows", 
    "", 
    "sub build_calculator {", 
    "", 
    "    &on; &on;\t\t\t# on/off kluge to initialize HP stack", 
    "", 
    "    # LED display, help button, and HP logo.", 
    "", 
    "    my $tf = $mw->Frame(-background => $SILVER);", 
    "    $tf->pack(qw/-side top -fill both -expand 1/);", 
    "", 
    "    $tf->Label(", 
    "        -relief       => 'sunken',", 
    "        -borderwidth  => 10, ", 
    "        -background   => 'honeydew4',", 
    "        -width        => 30,", 
    "        -foreground   => 'black',", 
    "        -font         => ['arial', 14, 'bold'],", 
    "        -textvariable => \\$XV,", 
    "        -anchor       => 'w',", 
    "    )->pack(qw/-side left -expand 1 -fill x -padx 70/);", 
    "", 
    "    my $hp = $tf->Button(-text => $MODEL, -relief => 'raised',", 
    "\t\t\t-command => sub {$ONOFF = 1; &on; &exit});", 
    "    $hp->pack(qw/-side right -expand 1 -fill both -padx 20 -pady 10/);", 
    "    $hp->bind('<Enter>' => sub {$_[0]->configure(-text => \"Quit\\n--\\n16C\")});", 
    "    $hp->bind('<Leave>' => sub {$_[0]->configure(-text => $MODEL)});", 
    "", 
    "    # Horizontal black and silver lines + vertical left/right silver lines.", 
    "", 
    "    $mw->Frame(qw/-background black -height 10/)->pack(qw/-fill x -expand 1/);", 
    "    $mw->Frame(-bg => $SILVER, -height => 5)->pack(qw/-fill x -expand 1/);", 
    "", 
    "    my $frame0 = $mw->Frame(-background => $GRAY_LIGHTEST);", 
    "    $frame0->pack(qw/-side top   -fill both -expand 1/);", 
    "", 
    "    $frame0->Frame(-width => 5, -bg => $SILVER)->", 
    "        pack(qw/-side left -expand 1 -fill y/);", 
    "    $frame0->Frame(-width => 5, -bg => $SILVER)->", 
    "        pack(qw/-side right -expand 1 -fill y/);", 
    "", 
    "    # These frames hold all the calculator keys.", 
    "", 
    "    my $frame1 = $frame0->Frame->pack(qw/-side top   -fill both -expand 1/);", 
    "    my $frame2 = $frame0->Frame->pack(qw/-side left  -fill both -expand 1/);", 
    "    my $frame3 = $frame0->Frame->pack(qw/-side right -fill both -expand 1/);", 
    "", 
    "    # Bottom finishing detail.", 
    "", 
    "    $mw->Frame(", 
    "        -background => $SILVER,", 
    "        -width      => 20,", 
    "        -height     => 25,", 
    "    )->pack(qw/-side left -expand 0/);   ", 
    "    $mw->Label(", 
    "        -text       => ' H E W L E T T . P A C K A R D ',", 
    "        -font       => ['courier', 14, 'bold'],\t\t       ", 
    "        -foreground => $SILVER,", 
    "        -background => $GRAY_LIGHTEST,", 
    "    )->pack(qw/-side left -expand 0/);", 
    "    $mw->Frame(", 
    "        -background => $SILVER,", 
    "        -height     => 25,", 
    "    )->pack(qw/-side left -expand 1 -fill x/);   ", 
    "    my $quest = $mw->Button(", 
    "        -text               => '?',", 
    "\t-font               => '6x9',", 
    "        -relief             => 'flat',", 
    "\t-highlightthickness => 0,", 
    "\t-background         => $SILVER,\t", 
    "        -borderwidth        => 0,", 
    "        -pady               => 0,", 
    "        -command            =>", 
    "            sub {", 
    "\t\t$HELP->deiconify;", 
    "\t    },", 
    "    )->pack(qw/-side left -expand 0 -fill y/);", 
    "    $quest->bind('<2>' => sub {", 
    "\tmy (@register) = ('(X)', '(Y)', '(Z)', '(T)');", 
    "\tprint \"\\n\";", 
    "        for (my $i = $#STACK; $i >= 0; $i--) {", 
    "\t    print \"stack+$i $register[$i] : '\", $STACK[$i], \"'\\n\";", 
    "\t}", 
    "    });", 
    "    $mw->Frame(", 
    "        -background => $SILVER,", 
    "\t-width      => 5,", 
    "        -height     => 25,", 
    "    )->pack(qw/-side left -expand 0/);   ", 
    "", 
    "    # Create special Compound images for certain keys.", 
    "", 
    "    my $rolu = $mw->Compound;", 
    "    my (@cargs) = (-foreground => $BLUE, -background => $GRAY);", 
    "    $rolu->Text(-text => 'R', -foreground => $BLUE);", 
    "    $rolu->Image(-image => $mw->Bitmap(-data => << 'END', @cargs));", 
    "#define up2_width 11", 
    "#define up2_height 12", 
    "static unsigned char up2_bits[] = {", 
    "  0x00, 0x00, 0x20, 0x00, 0x70, 0x00, 0xf8, 0x00, 0xfc, 0x01, 0xfe, 0x03,", 
    "  0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00,", 
    "  };", 
    "END", 
    "", 
    "    my $rold = $mw->Compound;", 
    "    @cargs = (-foreground => 'white', -background => $GRAY);", 
    "    $rold->Text(-text => 'R', -foreground => 'white');", 
    "    $rold->Image(-image => $mw->Bitmap(-data => << 'END', @cargs));", 
    "#define down2_width 11", 
    "#define down2_height 12", 
    "static unsigned char down2_bits[] = {", 
    "  0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00,", 
    "  0xfe, 0x03, 0xfc, 0x01, 0xf8, 0x00, 0x70, 0x00, 0x20, 0x00, 0x00, 0x00,", 
    "  };", 
    "END", 
    "", 
    "    my $swap = $mw->Compound;", 
    "    $swap->Text(-text => 'X', -foreground => 'white');", 
    "    $swap->Image(-image => $mw->Bitmap(-data => << 'END', @cargs));", 
    "#define swap_width 8", 
    "#define swap_height 15", 
    "static unsigned char swap_bits[] = {", 
    "  0x00, 0x00, 0x00, 0x06, 0x18, 0x60, 0x18, 0x06, 0x00, 0x60, 0x18, 0x06,", 
    "  0x18, 0x60, 0x00, };", 
    "END", 
    "    $swap->Text(-text => 'Y', -foreground => 'white');", 
    "", 
    "    # Build the first 2 rows of the calculator, 10 calculator keys per row.", 
    "", 
    "    my $dv = sub {$_[1] / $_[0]}; # division", 
    "    my $xr = sub {$_[1] ^ $_[0]}; # exclusive OR", 
    "    my $dd = sub {$_[1] / $_[0]}; # double divide", 
    "", 
    "    my $sq = sub {sqrt $_[0]};\t  # square root", 
    "    my $rp = sub {1 / $_[0]};\t  # reciprocal", 
    "", 
    "    my $ml = sub {$_[1] * $_[0]}; # multiplication", 
    "    my $an = sub {$_[1] & $_[0]}; # AND", 
    "    my $dm = sub {$_[1] * $_[0]}; # double multiply", 
    "", 
    "    build_button_rows $frame1, [", 
    "        [", 
    "            ['A',   'SL',      'LJ',   $GRAY,   \\&err],", 
    "\t    ['B',   'SR',      'ASR',  $GRAY,   \\&err],", 
    "            ['C',   'RL',      'RLC',  $GRAY,   \\&err],", 
    "            ['D',   'RR',      'RRC',  $GRAY,   \\&err],", 
    "            ['E',   'RLn',     'RLCn', $GRAY,   \\&err],", 
    "            ['F',   'RRn',     'RRCn', $GRAY,   \\&err],", 
    "            ['7',   'MASKL',   '#B',   $GRAY,   [\\&key, '7']],", 
    "            ['8',   'MASKR',   'ABS',  $GRAY,   [\\&key, '8']],", 
    "            ['9',   'RMD',     'DBLR', $GRAY,   [\\&key, '9']],", 
    "            ['/',   'XOR',     'DBL/', $GRAY,   [\\&math3, $dv, $xr, $dd]],", 
    "        ],", 
    "        [", 
    "            ['GSB', 'x><(i)',  'RTN',  $GRAY,   \\&err],", 
    "\t    ['GTO', 'x><I',    'LBL',  $GRAY,   \\&err],", 
    "            ['HEX', 'Show',    'DSZ',  $GRAY,   \\&err],", 
    "            ['DEC', 'Show',    'ISZ',  $GRAY,   \\&err],", 
    "            ['OCT', 'Show',    'sqrt', $GRAY,   [\\&gmath, $sq]],", 
    "            ['BIN', 'Show',    '1/x',  $GRAY,   [\\&gmath, $rp]],", 
    "            ['4',   'SB',      'SF',   $GRAY,   [\\&key, '4']],", 
    "            ['5',   'CB',      'CF',   $GRAY,   [\\&key, '5']],", 
    "            ['6',   'B?',      'F?',   $GRAY,   [\\&key, '6']],", 
    "            ['*',   'AND',     'DBLx', $GRAY,   [\\&math3, $ml, $an, $dm]],", 
    "        ],", 
    "    ];", 
    "", 
    "    # Build the leftmost 5 calculator keys of the last 2 rows.", 
    "", 
    "    build_button_rows $frame2, [", 
    "        [", 
    "            ['R/S', '(i)',     'p/r',  $GRAY,   \\&err],", 
    "\t    ['SST', 'I',       'BST',  $GRAY,   \\&err],", 
    "            [$rold, 'cPRGM',   $rolu,  $GRAY,   \\&roll_stack],", 
    "            [$swap, 'cREG',    'PSE',  $GRAY,   \\&swapxy],", 
    "            ['BSP', 'cPREFIX', 'CLx',  $GRAY,   \\&bspclrx],", 
    "        ],", 
    "        [", 
    "            ['ON',   '',       '',     $GRAY,   \\&on],", 
    "\t    ['f',    '',       '',     $ORANGE, \\&f],", 
    "            ['g',    '',       '',     $BLUE,   \\&g],", 
    "            ['STO', 'WSIZE',   '<',    $GRAY,   \\&err],", 
    "            ['RCL', 'FLOAT',   '>',    $GRAY,   \\&err],", 
    "        ],", 
    "    ];", 
    "", 
    "    # The 2 column high ENTER key divides the last 2 rows of calculator keys.", 
    "", 
    "    my $enter = $frame0->Key(", 
    "        -topl       => 'WINDOW',", 
    "        -butl       => \"E\\nN\\nT\\nE\\nR\",", 
    "        -botl       => 'LSTx',", 
    "        -background => $GRAY,", 
    "        -command    => \\&enter,", 
    "        -height     => 6,", 
    "    );", 
    "    $enter->pack(qw/-side left -expand 1 -fill both/);", 
    "", 
    "    # Build the rightmost 4 calculator keys of the last two rows.", 
    "", 
    "    my $sb = sub {$_[1] - $_[0]}; # subtraction", 
    "", 
    "    my $ad = sub {$_[1] + $_[0]}; # addition", 
    "    my $io = sub {$_[1] | $_[0]}; # inclusive OR", 
    "", 
    "    build_button_rows $frame3, [", 
    "        [", 
    "            ['1',    '1\\'S',   'X<=y', $GRAY,   [\\&key, '1']],", 
    "            ['2',    '2\\'S',   'x<0',  $GRAY,   [\\&key, '2']],", 
    "            ['3',    'UNSGN',  'x>y',  $GRAY,   [\\&key, '3']],", 
    "            ['-',    'NOT',    'x>0',  $GRAY,   [\\&math3, $sb, undef, undef]],", 
    "        ],", 
    "        [", 
    "            ['0',   'MEM',     'x!=y', $GRAY,   [\\&key, '0']],", 
    "            ['.',   'STATUS',  'x!=0', $GRAY,   [\\&key, '.']],", 
    "            ['CHS', 'EEX',     'x=y',  $GRAY,   \\&chs],", 
    "            ['+',   'OR',      'x=0',  $GRAY,   [\\&math3, $ad, $io, undef]],", 
    "        ],", 
    "    ];", 
    "", 
    "    # Now establish key bindings for the digits and common arithmetic", 
    "    # operation, including keypad keys, delete, etcetera.", 
    "", 
    "    foreach my $key ( qw/0 1 2 3 4 5 6 7 8 9/ ) {", 
    "        $mw->bind( \"<Key-$key>\" => [\\&key, $key] );", 
    "        $mw->bind( \"<KP_$key>\"  => [\\&key, $key] );", 
    "    }", 
    "", 
    "    foreach my $key ( qw/period KP_Decimal/ ) {", 
    "        $mw->bind( \"<$key>\"     => [\\&key, '.'] );", 
    "    }", 
    "", 
    "    foreach my $key ( qw/Return KP_Enter/ ) {", 
    "        $mw->bind( \"<$key>\"     =>  \\&enter );", 
    "    }", 
    "", 
    "    foreach my $key ( qw/plus KP_Add/ ) {", 
    "        $mw->bind( \"<$key>\"     => [\\&math3, $ad, $io,   undef] );", 
    "    }", 
    "", 
    "    foreach my $key ( qw/minus KP_Subtract/ ) {", 
    "        $mw->bind( \"<$key>\"     => [\\&math3, $sb, undef, undef] );", 
    "    }", 
    "", 
    "    foreach my $key ( qw/asterisk KP_Multiply/ ) {", 
    "        $mw->bind( \"<$key>\"     => [\\&math3, $ml, $an,     $dm] );", 
    "    }", 
    "", 
    "    foreach my $key ( qw/slash KP_Divide/ ) {", 
    "        $mw->bind( \"<$key>\"     => [\\&math3, $dv, $xr,     $dd] );", 
    "    }", 
    "", 
    "    $mw->bind( '<Delete>'       => \\&bspclrx );", 
    "  ", 
    "    $MAC_PB->set($MAC_PB_P = 90);", 
    "", 
    "} # end build_calculator", 
    "", 
    "sub build_help_window {", 
    "", 
    "    $MAC_PB->set($MAC_PB_P = 10);", 
    "", 
    "    $HELP = $mw->Toplevel(-tile => $mw->Photo(-file => 'images/hp16c-tile.gif'));", 
    "    $HELP->withdraw;", 
    "    $MAC_PB->set($MAC_PB_P = 15);", 
    "    $HELP->title('HP 16C Help');", 
    "    $HELP->protocol('WM_DELETE_WINDOW' => sub {});", 
    "", 
    "    $MAC_PB->set($MAC_PB_P = 20);", 
    "", 
    "    my $frame = $HELP->Frame->pack(qw/-padx 70 -pady 40/);", 
    "    $frame->Button(", 
    "        -text             => 'Close', ", 
    "        -command          => sub {$HELP->withdraw},", 
    "        -background       => $BLUE_DARKER,", 
    "        -activebackground => $BLUE,\t\t\t   ", 
    "    )->pack(qw/-expand 1 -fill both/);", 
    "    $frame->Label(", 
    "        -text => '? <B2> prints the stack.',", 
    "    )->pack(qw/-expand 1 -fill both/);", 
    "", 
    "    $MAC_PB->set($MAC_PB_P = 25);", 
    "", 
    "    $frame->Label(-image => $mw->Photo(-file => 'images/hp16c-help.gif'))->pack;", 
    "", 
    "    $MAC_PB->set($MAC_PB_P = 30);", 
    "", 
    "    $frame->Label(", 
    "        -text => ' ',", 
    "    )->pack(qw/-expand 1 -fill both/);", 
    "", 
    "    $MAC_PB->set($MAC_PB_P = 35);", 
    "", 
    "} # end build_help_window", 
    "", 
    "sub splash {", 
    "    ", 
    "    my $splash = $mw->Splashscreen(-milliseconds => 3000);", 
    "    $splash->Label(-text => 'Building your HP 16C ...', -bg => $BLUE)->", 
    "\tpack(qw/-fill both -expand 1/);", 
    "    $MAC_PB = $splash->MacProgressBar(-width => 300);", 
    "    $MAC_PB->pack(qw/-fill both -expand 1/);", 
    "    $splash->Label(-image => $mw->Photo(-file => 'images/hp16c-splash.gif'))->pack;", 
    "", 
    "    $splash->bindDump;", 
    "", 
    "    return $splash;", 
    "", 
    "} # end_splash", 
    "", 
    "# Calculator key processors.", 
    "", 
    "sub bspclrx {", 
    "    return unless $ONOFF;", 
    "    if ($F_PRESSED) {", 
    "\t$mw->bell;", 
    "\tend;", 
    "\treturn;", 
    "    }", 
    "", 
    "    if ($G_PRESSED) {\t\t# clrX", 
    "\t$STACK[0] = 0;", 
    "\t$CLRX = 1;", 
    "\t$PUSHX = 0;", 
    "    } else {", 
    "\tif (length($STACK[0]) <= 2) { # BKSP", 
    "\t    $STACK[0] = 0;", 
    "\t    $CLRX = 1;", 
    "\t    $PUSHX = 0;", 
    "\t} else {", 
    "\t    chop $STACK[0];", 
    "\t}", 
    "    }", 
    "    end;", 
    "}", 
    "", 
    "sub chs {\t\t\t# change sign", 
    "    my $s = substr($STACK[0], 0, 1);", 
    "    substr($STACK[0], 0, 1) = ($s eq '-') ? ' ' : '-';", 
    "    end;", 
    "}", 
    "", 
    "sub end {\t\t\t# key cleanup", 
    "    $F_PRESSED = $G_PRESSED = 0;", 
    "    $XV = $STACK[0];", 
    "}", 
    "", 
    "sub enter {\t\t\t# enter key", 
    "    unshift @STACK, $STACK[0];", 
    "    $#STACK = $STACKM if $#STACK > $STACKM;", 
    "    $CLRX = 1;", 
    "    $PUSHX = 0;", 
    "    end;", 
    "}", 
    "                           ", 
    "sub err {$mw->bell if $ONOFF}\t# error", 
    "", 
    "sub f {$F_PRESSED = 1};\t\t# F key", 
    "", 
    "sub g {$G_PRESSED = 1};\t\t# G key", 
    "", 
    "sub gmath {\t\t\t# G key arithmetic operations", 
    "", 
    "    # gmath() expects one code reference to an anonymous subroutine, which", 
    "    # expects one argument, X from the RPN stack. ", 
    "", 
    "    if (not $G_PRESSED) {", 
    "\t$mw->bell;", 
    "\tend;", 
    "\treturn;", 
    "    }", 
    "", 
    "    $STACK[0] = &{$_[0]}($STACK[0]);", 
    "    $STACK[0] = \" $STACK[0]\" if substr($STACK[0], 0, 1) ne '-';", 
    "    $CLRX = $PUSHX = 1;", 
    "    end;", 
    "}", 
    "", 
    "sub hpshift {\t\t\t# empty HP stack", 
    "    $#STACK = $STACKM if $#STACK > $STACKM;", 
    "    my $v = shift @STACK;", 
    "    $STACK[$STACKM] = $STACK[$STACKM - 1] if $#STACK == ($STACKM - 1);", 
    "    end;", 
    "    return $v;", 
    "}", 
    "", 
    "sub key {\t\t\t# process generic key clicks", 
    "", 
    "    shift if ref $_[0];\t\t# toss bind() object", 
    "    my $key = $_[0];", 
    "    return unless $ONOFF;", 
    "    if ($F_PRESSED or $G_PRESSED) {", 
    "\t$mw->bell;", 
    "\tend;", 
    "\treturn;", 
    "    }", 
    "", 
    "    &enter if $PUSHX;", 
    "    $STACK[0] = ' ' if $CLRX;", 
    "", 
    "    $STACK[0] .= $key;", 
    "    $CLRX = $PUSHX = 0;", 
    "    end;", 
    "} # end key", 
    "", 
    "sub math3 {\t\t\t# tri-arithmetic keys", 
    "", 
    "    # math3() expects three code references to anonymous subroutines, each", 
    "    # of which expects two arguments, X and Y from the RPN stack. ", 
    "    #", 
    "    # $_[0] = normal button press", 
    "    # $_[1] = \"f\" qualified button press", 
    "    # $_[2] = \"g\" qualified button press", 
    "", 
    "    shift if ref $_[0];\t\t# toss bind() object", 
    "    my $math = $_[0];", 
    "    $math = $_[1] if $F_PRESSED;", 
    "    $math = $_[2] if $G_PRESSED;", 
    "    if (not defined $math) {", 
    "\t$mw->bell;", 
    "\tend;", 
    "\treturn;", 
    "    }", 
    "", 
    "    my $x = &hpshift;", 
    "    my $y = $STACK[0];", 
    "    $STACK[0] = &{$math}($x, $y);", 
    "    $STACK[0] = \" $STACK[0]\" if substr($STACK[0], 0, 1) ne '-';", 
    "    $CLRX = $PUSHX = 1;", 
    "    end;", 
    "}", 
    "", 
    "sub on {\t\t\t# power on/off", 
    "    if ($ONOFF) {", 
    "\t$ONOFF = 0;", 
    "\tif (open(RC, \">$RCFILE\")) {", 
    "\t    foreach (reverse @STACK) {", 
    "\t\tprint RC \"$_\\n\";", 
    "\t    }", 
    "\t    close RC;", 
    "\t}", 
    "\tend;", 
    "\t$XV = '';", 
    "    } else {", 
    "\t$ONOFF = 1;", 
    "\tif (open(RC, $RCFILE)) {", 
    "\t    @STACK = () if -s $RCFILE;", 
    "\t    while ($_ = <RC>) {", 
    "\t\tchomp;", 
    "\t\tunshift @STACK, $_;", 
    "\t    }", 
    "\t    close RC;", 
    "\t}", 
    "\t$CLRX = $PUSHX = 1;", 
    "\tend;", 
    "    }", 
    "} # end on", 
    "", 
    "sub roll_stack {", 
    "    return unless $ONOFF;", 
    "    if ($F_PRESSED) {", 
    "\t$mw->bell;", 
    "\tend;", 
    "\treturn;", 
    "    }", 
    "", 
    "    if ($G_PRESSED) {", 
    "\tunshift @STACK, pop @STACK; # roll stack up", 
    "    } else {", 
    "\tpush @STACK, shift @STACK;  # roll stack down", 
    "    }", 
    "    end;", 
    "}", 
    "", 
    "sub swapxy {", 
    "    return unless $ONOFF;", 
    "    if ($F_PRESSED or $G_PRESSED) {", 
    "\t$mw->bell;", 
    "\tend;", 
    "\treturn;", 
    "    }", 
    "", 
    "    (@STACK[0, 1]) = (@STACK[1, 0]);", 
    "    end;", 
    "}!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}