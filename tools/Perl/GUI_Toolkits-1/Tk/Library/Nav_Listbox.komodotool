{
  "keyboard_shortcut": "", 
  "name": "Nav Listbox", 
  "value": [
    "package Tk::NavListbox;", 
    "", 
    "use vars qw($VERSION);", 
    "$VERSION = '1.0';", 
    "", 
    "use Tk qw(Ev);", 
    "use Tk::widgets qw(Listbox Dialog);", 
    "use base qw(Tk::Derived Tk::Listbox);", 
    "use strict;", 
    "", 
    "Construct Tk::Widget 'NavListbox';", 
    "", 
    "sub ClassInit", 
    "{", 
    "    my ($class, $mw) = @_;", 
    "    ", 
    "    $class->SUPER::ClassInit($mw);", 
    "    $mw->bind($class, '<Button-3>' => [\\&show_menu, Ev('X'), Ev('Y'), Ev('y')]);", 
    "    $mw->bind($class, '<Alt-Up>'   => [\\&move_item, -1]);", 
    "    $mw->bind($class, '<Alt-Down>' => [\\&move_item,  1]);", 
    "}", 
    "", 
    "sub Populate", 
    "{", 
    "    my ($self, $args) = @_;", 
    "    ", 
    "    $self->SUPER::Populate($args);", 
    "", 
    "    my $menu = $self->Menu(-tearoff => 0);", 
    "    $menu->command(-label   => \"New Item\" , ", 
    "                   -command => [$self => 'new_item']);", 
    "    $menu->command(-label   => \"Delete\",   ", 
    "                   -command => [$self => 'delete_item']);", 
    "    $menu->command(-label   => \"Duplicate\", ", 
    "                   -command => [$self => 'dup_item']);", 
    "    $menu->command(-label   => \"Rename\",   ", 
    "                   -command => [$self => 'rename_item']);", 
    "    $menu->separator;", 
    "    $menu->command(-label   => \"^ Move up\", ", 
    "                   -command => [$self => 'move_item', -1]);", 
    "    $menu->command(-label   => \"v Move down\",", 
    "                   -command => [$self => 'move_item',  1]);", 
    "    $self->{'lbmenu'} = $menu;", 
    "", 
    "    $self->ConfigSpecs(", 
    "        -validate => [\"CALLBACK\", \"validate\", \"Validate\", sub { return 1 }],", 
    "    );", 
    "}", 
    "", 
    "sub show_menu", 
    "{", 
    "    my ($lb, $x, $y, $lby) = @_;", 
    "", 
    "    # select the index we just clicked on.", 
    "    my $index = $lb->nearest($lby);", 
    "    $lb->selectionClear(\"0\", \"end\");", 
    "    $lb->selectionSet($index);", 
    "", 
    "    my $m = $lb->{'lbmenu'};", 
    "    if ($index == -1) {", 
    "\tforeach (1..3,5,6) { $m->entryconfigure($_, -state => 'disabled'); }", 
    "    } else {", 
    "\tforeach (1..3,5,6) { $m->entryconfigure($_, -state => 'normal'); }", 
    "\tif ($index == 0) { $m->entryconfigure(5, -state => 'disabled'); }", 
    "\tif ($index == $lb->size - 1) { $m->entryconfigure(6, -state => 'disabled'); }", 
    "    }", 
    "    ", 
    "    # popup the menu; goes away when they select something", 
    "    $m->post($x, $y);", 
    "}", 
    "", 
    "sub new_item", 
    "{", 
    "    my ($lb) = @_;", 
    "    my $index = $lb->curselection;", 
    "", 
    "    $index = \"end\" if ! defined $index;", 
    "    $lb->insert($index, \"<new item>\");\t", 
    "    $lb->selectionClear(\"0\", \"end\");", 
    "    $lb->selectionSet($index);", 
    "    $lb->rename_item;", 
    "}", 
    "", 
    "sub delete_item ", 
    "{", 
    "    my ($lb) = @_;", 
    "    my $index = $lb->curselection;", 
    "    $lb->delete($index);", 
    "}", 
    "", 
    "sub dup_item ", 
    "{", 
    "    my ($lb) = @_;", 
    "    my $index = $lb->curselection;", 
    "    $lb->insert($index, $lb->get($index));\t", 
    "    $lb->selectionClear(\"0\", \"end\");", 
    "    $lb->selectionSet($index);", 
    "    $lb->rename_item;", 
    "}", 
    "", 
    "sub rename_item ", 
    "{", 
    "    my ($lb) = @_;", 
    "    ", 
    "    my $index = $lb->curselection;", 
    "    my ($x, $y, $w, $h) = $lb->bbox($index);", 
    "    my $bd = $lb->cget(-borderwidth) * 2;", 
    "", 
    "    $y -= $bd;", 
    "    my $e = $lb->Entry(-font => $lb->cget(-font));", 
    "    $e->insert(\"end\", $lb->get($index));", 
    "    $e->selectionRange(\"0\", \"end\");", 
    "    ", 
    "    $e->bind(\"<Return>\",", 
    "\t     [sub {", 
    "\t\t my ($e, $lb, $i) = @_;", 
    "\t\t ", 
    "\t\t if ( $lb->Callback(-validate => $e->get) ) {", 
    "\t\t     $e->placeForget;", 
    "\t\t     # Must insert first, then delete so that scrolling", 
    "\t\t     # doesn't get mussed up.", 
    "\t\t     $lb->insert($i, $e->get);", 
    "\t\t     $lb->delete($i + 1);", 
    "\t\t     $lb->activate($i);", 
    "\t\t     $e->destroy;", 
    "\t\t } else { $e->bell; }", 
    "\t     }, $lb, $index]);", 
    "    ", 
    "    # Allows us to abort the editing we began ( can leave a new item empty )", 
    "    $e->bind(\"<Escape>\", sub { my ($e) = @_; $e->placeForget; $e->destroy; } );", 
    "    ", 
    "    $e->place(-x => 0, -y => $y, -width => $lb->width - $bd);", 
    "    $e->focus;", 
    "    $e->grab;\t\t# Don't let anything else happen until they finish w/entry.", 
    "    # Wait until the entry is destroyed before doing anything else", 
    "    $e->waitWindow;", 
    "}", 
    "", 
    "sub move_item", 
    "{", 
    "    my ($lb, $direction) = @_;", 
    "    my $index = $lb->curselection;", 
    "", 
    "    # Sanity checks", 
    "    return if ($index == 0 && $direction == -1);", 
    "    return if ($index == $lb->size()-1 && $direction == 1);", 
    "", 
    "    my $newindex = $index + $direction;", 
    "", 
    "    my $item = $lb->get($index);", 
    "    $lb->delete($index);", 
    "    $lb->insert($newindex, $item);", 
    "    $lb->selectionSet($newindex);", 
    "}", 
    "", 
    "1;!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}