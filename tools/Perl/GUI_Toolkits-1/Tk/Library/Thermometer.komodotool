{
  "keyboard_shortcut": "", 
  "name": "Thermometer", 
  "value": [
    "$Tk::Thermometer::VERSION = '1.0';", 
    "", 
    "package Tk::Thermometer;", 
    "", 
    "use Tk::widgets qw/Radiobutton Scale/;", 
    "use base qw/Tk::Frame/;", 
    "use strict;", 
    "", 
    "Construct Tk::Widget 'Thermometer';", 
    "", 
    "my %PIXMAPS;\t\t\t# images for the class", 
    "my @TSCALES = qw/Kelvin Celsius Fahrenheit/;", 
    "", 
    "sub ClassInit {", 
    "", 
    "    my($class, $mw) = @_;", 
    "    $class->SUPER::ClassInit($mw);", 
    "    ", 
    "    foreach my $unit (@TSCALES) {", 
    "        $PIXMAPS{$unit} = $mw->Pixmap(-file => \"images/$unit.xpm\");", 
    "    }", 
    "", 
    "} # end ClassInit", 
    "", 
    "sub Populate {", 
    "", 
    "    my($self, $args) = @_;", 
    "", 
    "    $self->SUPER::Populate($args);", 
    "", 
    "    my $scale = $self->Component(qw/Scale scale -orient vertical/);", 
    "    $scale->pack(qw/-side left -fill both -expand 1/);", 
    "", 
    "    $self->{tscale} = $self->{old_tscale} = $TSCALES[0];", 
    "    my @highlightthickness = $scale;", 
    "", 
    "    foreach my $unit (@TSCALES) {", 
    "\tmy $r = $self->Component('Radiobutton' => \"radiobutton-$unit\",", 
    "            -image    => $PIXMAPS{$unit},", 
    "            -variable => \\$self->{tscale},", 
    "            -value    => $unit,", 
    "            -command  => [$self => 'tscale', $unit],", 
    "        )->pack(-side => 'top');", 
    "\tpush @highlightthickness, $r;", 
    "    }", 
    "", 
    "    $self->ConfigSpecs(", 
    "\t-background   =>", 
    "          [['DESCENDANTS', 'SELF'], 'background', 'Background', 'white'],", 
    "        -from         => [$scale, qw/from From 500/],", 
    "        -highlightthickness => ", 
    "          [[@highlightthickness], qw/highlightThickness HighlightThickness 0/],", 
    "        -length       => [$scale, qw/length Length 200/],", 
    "\t-tscale        => [qw/METHOD tscale Tscale/, $TSCALES[0]],", 
    "        -sliderlength => [$scale, qw/sliderLength SliderLength 10/],", 
    "        -to           => [$scale, qw/to To 0/],", 
    "        -width        => [$scale, qw/width Width 10/],", 
    "        'DEFAULT'     => [$scale],", 
    "    );", 
    "    $self->Delegates('DEFAULT' => $scale);", 
    "", 
    "} # end Populate", 
    "", 
    "sub tscale {", 
    "", 
    "    # The temperature scale has changed - update the thermometer's", 
    "    # lower bound and reset the current temperature in the new scale.", 
    "", 
    "    my($self, $new_tscale) = @_;", 
    "", 
    "    if ($#_ > 0) {", 
    "\tmy $old_tscale = $self->{old_tscale};", 
    "\treturn if $new_tscale eq $old_tscale;", 
    "", 
    "\tmy $subr = \"${old_tscale}2${new_tscale}\";", 
    "\t$self->{tscale} = $self->{old_tscale} = $new_tscale;", 
    "\tmy $scale = $self->Subwidget('scale');", 
    "\t$scale->set( $self->$subr( $scale->get ) );", 
    "    } else {", 
    "\t$self->{tscale};\t# cget() requests here", 
    "    }", 
    "", 
    "} # end tscale", 
    "", 
    "# Scale conversion data and subroutines.", 
    "#", 
    "#   Temperature     Kelvin   Celsius   Fahrenheit", 
    "#", 
    "#   Absolute Zero        0   -273.16      -459.69", 
    "#   Freezing        273.16         0           32", 
    "#   Boiling         373.16       100          212", 
    "", 
    "use constant ABSZ_CELSIUS    => -273.16;", 
    "use constant ABSZ_FAHRENHEIT => -459.69;", 
    "use constant ABSZ_KELVIN     => 0;", 
    "use constant FREZ_FAHRENHEIT => 32;", 
    "use constant FIVE_NINTHS     => 5.0 / 9.0;", 
    "use constant NINE_FIFTHS     => 9.0 / 5.0;", 
    "", 
    "# All conversion subroutines are called with two arguments, the", 
    "# mega-widget reference, and the temperature in the old scale.", 
    "", 
    "sub Kelvin2Celsius {", 
    "    $_[0]->configure(-to => ABSZ_CELSIUS);", 
    "    $_[1] + ABSZ_CELSIUS;", 
    "}", 
    "", 
    "sub Kelvin2Fahrenheit {", 
    "    $_[0]->configure(-to => ABSZ_FAHRENHEIT);", 
    "    NINE_FIFTHS * ( $_[1] + ABSZ_CELSIUS ) + FREZ_FAHRENHEIT;", 
    "}", 
    "", 
    "sub Celsius2Kelvin {", 
    "    $_[0]->configure(-to => ABSZ_KELVIN);", 
    "    $_[1] - ABSZ_CELSIUS;", 
    "}", 
    "", 
    "sub Celsius2Fahrenheit {", 
    "    $_[0]->configure(-to => ABSZ_FAHRENHEIT);", 
    "    NINE_FIFTHS * $_[1] + FREZ_FAHRENHEIT;", 
    "}", 
    "", 
    "sub Fahrenheit2Kelvin {", 
    "    $_[0]->configure(-to => ABSZ_KELVIN);", 
    "    FIVE_NINTHS * ( $_[1] - FREZ_FAHRENHEIT ) - ABSZ_CELSIUS;", 
    "}", 
    "", 
    "sub Fahrenheit2Celsius {", 
    "    $_[0]->configure(-to => ABSZ_CELSIUS);", 
    "    FIVE_NINTHS * ( $_[1] - FREZ_FAHRENHEIT );", 
    "}", 
    "", 
    "1;!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}