{
  "keyboard_shortcut": "", 
  "name": "Lock File", 
  "value": [
    "$LockFile::VERSION = '1.0';", 
    "", 
    "package LockFile;", 
    "", 
    "# Class LockFile constructor, methods, destructor, global class data, etc.", 
    "", 
    "require 5.005;", 
    "use Carp;", 
    "use Fcntl qw/:DEFAULT :flock/;", 
    "use File::Basename;", 
    "use subs qw/get_lock_time lockname/;", 
    "use vars qw/$AUTOLOAD $DEFAULT_LOCK_TIME $LOCK_PATH/;", 
    "use strict;", 
    "", 
    "BEGIN {", 
    "    $DEFAULT_LOCK_TIME = 10;\t# in minutes", 
    "    $LOCK_PATH = './locks';", 
    "}", 
    "", 
    "# Public methods.", 
    "", 
    "sub new {", 
    "    my($class, $file, $user, $lock_time) = @_;", 
    "    my $lock_obj = {-file => $file, -user => $user};", 
    "    bless $lock_obj, $class;", 
    "    $lock_obj->{lock_time} = get_lock_time $lock_time;", 
    "    $lock_obj->{have_lock} = $lock_obj->lock;", 
    "    $lock_obj;", 
    "}", 
    "", 
    "sub check_my_lock {", 
    "", 
    "    # Returns true if there is still a lock on a file and I own it.", 
    "", 
    "    my($self) = @_;", 
    "    my $lockstring = $self->{-user};", 
    "    my $owner = readlink (lockname $self->{-file});", 
    "    return ((not defined $owner) or ($lockstring ne $owner)) ? 0 : 1;", 
    "}", 
    "", 
    "sub extend_lock {", 
    "", 
    "    # Try to extend an existing lock.  Same return code as lock().", 
    "", 
    "    my($self, $lock_time) = @_;", 
    "    $self->{lock_time} = get_lock_time $lock_time;", 
    "    if ($self->check_my_lock) {", 
    "\t$self->lock;\t\t# returns 1 IFF lock extended", 
    "    } else {", 
    "\treturn 0;\t\t# someone else took the lock", 
    "    }", 
    "}", 
    "", 
    "sub lock {", 
    "", 
    "    # Single thread file locking, then create a symbolic link", 
    "    # identifying who has what file locked.  Returns 1 IFF the", 
    "    # lock is acquired, else 0;", 
    "", 
    "    my($self) = @_;", 
    "", 
    "    my $file = $self->{-file};", 
    "    my $lockname = lockname $file;", 
    "    my $lockstring = $self->{-user};", 
    "", 
    "    sysopen(LOCK, \"$LOCK_PATH/single_thread.lock\", O_RDWR|O_CREAT) or", 
    "\tdo {carp \"Can't open single_thread.lock: $!\"; return 0};", 
    "    flock(LOCK, LOCK_EX) or", 
    "\tdo {carp \"Can't flock single_thread.lock: $!\"; return 0};", 
    "", 
    "    my (@ls) = lstat $lockname;", 
    "    unless (@ls) {\t\t# file not locked, grab it", 
    "\tsymlink $lockstring, $lockname or die $!;", 
    "\tclose LOCK;", 
    "\treturn 1;", 
    "    } else {\t\t\t# file lock held", 
    "\tmy $expires = ($ls[10] ||= 0) + ($self->lock_time * 60); # seconds", 
    "\tif ((time > $expires) or $self->check_my_lock) {", 
    "\t    unlink $lockname or die $!;\t# lock's expired, or is mine,", 
    "\t    symlink $lockstring, $lockname or die $!;\t# so recreate it", 
    "\t    close LOCK;", 
    "\t    return 1;", 
    "\t} else {\t\t# lock belongs to someone else", 
    "\t    close LOCK;", 
    "\t    my $free = localtime $expires;", 
    "\t    my $owner = readlink $lockname or die $!;", 
    "\t    $self->{free} = $free;", 
    "\t    $self->{owner} = $owner;", 
    "\t    return 0;", 
    "\t}", 
    "    }", 
    "} # end lock", 
    "", 
    "sub lockname {", 
    "    \"$LOCK_PATH/\" . basename $_[0] . \"-lock\";", 
    "}", 
    "", 
    "sub unlock {", 
    "    unlink lockname $_[0]->{-file} if $_[0]->check_my_lock;", 
    "}", 
    "", 
    "# Private subroutines.", 
    "", 
    "sub get_lock_time {", 
    "    my($lock_time) = @_;", 
    "    (defined $lock_time and $lock_time <= $DEFAULT_LOCK_TIME) ?", 
    "\t$lock_time : $DEFAULT_LOCK_TIME;", 
    "}", 
    "", 
    "sub DESTROY {", 
    "    my($self) = @_;", 
    "    $self->unlock;\t\t# clear possible lock", 
    "    undef %{$self};\t\t# release lock hash", 
    "}", 
    "", 
    "# This trick is ripped right from Tom's object oriented tutorial,", 
    "# and provides a cool way to create accessor methods.", 
    "", 
    "my %FIELDS = (", 
    "    free      => undef,", 
    "    have_lock => undef,", 
    "    owner     => undef,", 
    "    lock_time => undef,", 
    ");", 
    "", 
    "sub AUTOLOAD {", 
    "", 
    "    my $lock = shift;", 
    "    my($class, $name) = $AUTOLOAD =~ /(.*)::(.*)/;", 
    "    unless (exists $FIELDS{$name})", 
    "        {carp \"Can't access $class field $name.\"}", 
    "    if (@_) {", 
    "\treturn $lock->{$name} = shift;", 
    "    } else{", 
    "\treturn $lock->{$name};", 
    "    }", 
    "", 
    "} # end AUTOLOAD", 
    "", 
    "1;!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}