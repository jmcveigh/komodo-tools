{
  "keyboard_shortcut": "", 
  "name": "Helper", 
  "value": [
    "#!/usr/local/bin/perl", 
    "#", 
    "# ipadmh - IP administrator helper.", 
    "#", 
    "# This helper is started by the Perl/Tk program ipadm, and", 
    "# mediates the data communications between the Tk interface", 
    "# code and the remote daemon, ipadmd.  On one hand, ipadmh", 
    "# reads and writes STDIN and STDOUT, which are actually the", 
    "# ends of two pipes created by ipadm.  On the other hand,", 
    "# ipadmh reads/writes a network socket connected to ipadmd.", 
    "#", 
    "# S. O. Lidie, 1999/07/15", 
    "", 
    "use 5.005;", 
    "use IPADM;", 
    "use IO::Socket;", 
    "use strict;", 
    "", 
    "do {print \"Usage:  ipadmh host port\\n\"; exit} unless @ARGV == 2;", 
    "", 
    "STDOUT->autoflush(1);           # unbuffer output", 
    "sub timeout {print \"1 Socket Timeout\\n$EOF\\n\"; $SIG{ALRM} = \\&timeout}", 
    "$SIG{PIPE} = sub {print \"2 Pipe Error.\\n$EOF\\n\"};", 
    "", 
    "my $sock = IO::Socket::INET->new( PeerAddr => $ARGV[0],", 
    "\t\t  Proto => 'tcp', PeerPort => $ARGV[1]);", 
    "print +((defined $sock) ? \"0 Connect OK\" : \"3 Connect Failed\"), \"\\n$EOF\\n\";", 
    "", 
    "while (1) {", 
    "", 
    "    while(<STDIN>) {", 
    "\tprint $sock $_;\t\t# send parent's command/data to daemon", 
    "\tlast if /^$EOF$/;", 
    "    }", 
    "", 
    "    my(@data) = ();", 
    "    $SIG{ALRM} = \\&timeout;\t# reset handler", 
    "    alarm 60;", 
    "", 
    "    while (<$sock>) {", 
    "\tpush @data, $_;\t\t# accumulate command's reply", 
    "\tlast if /^$EOF$/;", 
    "    }", 
    "", 
    "    alarm 0;", 
    "    print (/^$EOF$/ ? @data : \"4 Daemon Failure\\n$EOF\\n\");", 
    "", 
    "} # whilend", 
    "", 
    "close $sock;!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}