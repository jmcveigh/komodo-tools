{
  "keyboard_shortcut": "", 
  "name": "Media Change Daemon", 
  "value": [
    "#!/usr/local/bin/perl -w", 
    "# ", 
    "# mediachanged - media change daemon.", 
    "#", 
    "# Wait for connect on our well known port, display the received message", 
    "# in a Tk messageBox, and return the operator's reply.", 
    "#", 
    "# S. O. Lidie, 2000/07/11.", 
    "", 
    "use 5.005;", 
    "use IO::Handle;", 
    "use IO::Socket;", 
    "use Net::hostent;", 
    "use POSIX qw/setsid/;", 
    "use Tk;", 
    "use subs qw/client_connect/;", 
    "use strict;", 
    "", 
    "$SIG{CHLD} = sub {wait};", 
    "", 
    "my $pid = fork;", 
    "die \"fork failed: $!\" unless defined $pid;", 
    "exit if $pid;                   # parent exits, daemon continues", 
    "setsid or die \"setsid failed: $!\";", 
    "", 
    "my $server = IO::Socket::INET->new(", 
    "    Proto     => 'tcp',", 
    "    LocalPort => 8979,", 
    "    Listen    => SOMAXCONN,", 
    "    Reuse     => 1,", 
    ");", 
    "", 
    "die \"Socket::INET::new failed: $!\" unless defined $server;", 
    "", 
    "while (my $ns = $server->accept) {", 
    "", 
    "    my $peeraddr = $ns->peeraddr;", 
    "    my $hostinfo = gethostbyaddr($peeraddr);", 
    "    my $remote_host = $hostinfo->name || $ns->peerhost;", 
    "    my(@inetaddr) = unpack('C4', $peeraddr);", 
    "    my $from = \"Message from $remote_host (\" . join('.', @inetaddr) . ')';", 
    "    #unless ($inetaddr[0] == 192 and $inetaddr[1] == 168) {", 
    "    #   close $ns;", 
    "    #\tnext;", 
    "    #}", 
    " ", 
    "    if (my $pid = fork) {", 
    "        close $ns or die \"Client socket close failed: $!\";", 
    "    } elsif (defined $pid) {", 
    "        $ns->autoflush(1);", 
    "        client_connect $ns, $from;", 
    "    } else {", 
    "        die \"fork error: $!\";", 
    "    }", 
    "    ", 
    "} # whilend forever network daemon", 
    "", 
    "sub client_connect {", 
    "", 
    "    # Process a client connect - send our client either an \"Ok\" or", 
    "    # \"Cancel\" string, depending upon how the media change went.", 
    "", 
    "    my($ns, $from) = @_;", 
    "", 
    "    chomp( $_ = <$ns> );", 
    "", 
    "    my $mw = MainWindow->new;", 
    "    $mw->withdraw;", 
    "    $mw->bell;", 
    "    $mw->repeat(15 * 1000 => sub {$mw->bell});", 
    "    my $reply = $mw->messageBox(", 
    "        -icon       => 'info',", 
    "\t-type       => 'OKCancel',", 
    "        -message    => \"$from\\n\\n$_\",", 
    "\t-wraplength => '6i',", 
    "\t-title      => 'mediachanged',", 
    "        -background => '#ECFFFF',\t\t\t", 
    "    );", 
    "    print $ns \"$reply\\n\";", 
    "    close $ns;", 
    "    exit;", 
    "", 
    "} # end client_connect!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}