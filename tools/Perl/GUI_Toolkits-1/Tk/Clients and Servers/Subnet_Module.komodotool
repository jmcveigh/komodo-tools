{
  "keyboard_shortcut": "", 
  "name": "Subnet Module", 
  "value": [
    "$Subnet::VERSION = '1.0';", 
    "", 
    "package Subnet;", 
    "", 
    "# Class Subnet constructor, methods, destructor, global class data, etc.", 
    "# WARNING:  this is an *old* composite, not suitable for general use.  So,", 
    "# don't bother to send me bug reports - although patches are always welcome!", 
    "#", 
    "# SOL, 99/07/25", 
    "", 
    "use 5.005;", 
    "use Carp;", 
    "use Tie::Watch;", 
    "use Tk qw/lsearch/;", 
    "use Tk::Balloon;", 
    "use Tk::LabEntry;", 
    "use Tk::Toplevel;", 
    "use base qw/Tk::Toplevel/;", 
    "Construct Tk::Widget 'Subnet';", 
    "", 
    "use subs qw/bin2ip build_avail build_ip ip2bin numerically", 
    "    numerically2/;", 
    "use vars qw/$AUTOLOAD/;", 
    "use strict;", 
    "", 
    "my @subnet_info = qw/Title Base_IP Subnet_Mask Gateway Domain/;", 
    "my @node_info = qw/A IP_Address Ethernet_Address CNAME MX Comments Last_Mod/;", 
    "", 
    "sub Populate {", 
    "", 
    "    # Subnet composite widget constructor.", 
    "", 
    "    my($cw, $args) = @_;", 
    "", 
    "    $cw->withdraw;", 
    "    my $subnet = delete $args->{-sdb_path};", 
    "    $cw->{Subnet_Data} = delete $args->{-sdb};", 
    "    $cw->{Id} = delete $args->{-id};", 
    "    $cw->{Updatecmd} = delete $args->{-updatecmd};", 
    "    $cw->{Cancelcmd} = delete $args->{-cancelcmd};", 
    "    $cw->SUPER::Populate($args);", 
    "", 
    "    $cw->{Balloon} = undef;", 
    "    my $subnet_data = $cw->{Subnet_Data};", 
    "    my $gsl_status = shift @$subnet_data;", 
    "    my $edit = $gsl_status =~ /Have Lock/;", 
    "", 
    "    while ($_ = shift @$subnet_data) {", 
    "\tnext if /^#/;", 
    "\tlast if /__NODES__/;", 
    "\t/^\\s*(\\S+)\\s*=\\s*(.*)$/;", 
    "\t$cw->{$1} = $2;", 
    "    }", 
    "", 
    "    if (not $edit) {", 
    "\tmy($owner, $expire) = $gsl_status =~ /Lock Failed (\\S+) (.*)/;", 
    "\t$cw->messageBox(-message => \"Subnet '\" . $cw->{Title} .", 
    "\t    \"' is locked by $owner.  The lock will expire  $expire\" .", 
    "\t    \" unless freed before then.  You can examine \" .", 
    "            \"this subnet but cannot make any changes.\",", 
    "\t\t\t-bitmap  => 'warning');", 
    "    }", 
    "", 
    "    my($base_ip, $last_ip, $subnet_mask, $gateway);", 
    "    $base_ip = $cw->{Base_IP};", 
    "    $subnet_mask = $cw->{Subnet_Mask};", 
    "    $gateway = $cw->{Gateway};", 
    "    my $state = $edit ? 'normal' : 'disabled';", 
    "    my $balloon = $cw->Balloon(-state => 'status');", 
    "    $cw->{Balloon} = $balloon;", 
    "", 
    "    # If the subnet is editable, create a STORE callback to set the ", 
    "    # \"changed\" flag if any of the subnet variables are modified.", 
    "    # Then, in a container frame, grid all the global subnet data", 
    "    # in a series of LabEntry widgets, and attach balloon help.", 
    "", 
    "    my $callback = sub {", 
    "\tshift->Store(shift);", 
    "\t$cw->{Subnet_Changes}++;", 
    "    } if $edit;", 
    "", 
    "    my($bw, $bh, $row);\t\t# balloon widget, balloon help, grid row", 
    "    $row = 0;", 
    "    my $f1 = $cw->Frame(qw/-relief ridge -borderwidth 1/);", 
    "    $f1->grid(qw/-padx 10 -pady 10/);", 
    "", 
    "    foreach (@subnet_info, 'Last_IP') {", 
    "\t$bw = $f1->LabEntry(-state => $state,", 
    "\t\t\t    -textvariable => \\$cw->{$_},", 
    "\t\t\t    -label => $_ . ' ' x (16-length $_),", 
    "\t\t\t    -labelPack => [qw/-side left -anchor w/],", 
    "\t\t\t    -labelFont => '9x15',", 
    "        );", 
    "\t$bw->grid(-row => $row, -column => 0, -sticky => 'ew');", 
    "\t$bh = ($edit and !/^Last_IP/) ? '' : 'not ';", 
    "\t$balloon->attach($bw, -statusmsg => \"The $_ field is ${bh}editable.\");", 
    "\t$row++;", 
    "", 
    "\tif (/^Last_IP/) {", 
    "\t    $bw->configure(-state => 'disabled');", 
    "\t} else {", 
    "\t    push @{$cw->{Watchpoints}}, Tie::Watch->new(", 
    "                -variable => \\$cw->{$_}, -store => $callback) if $edit;", 
    "\t}", 
    "    }", 
    "", 
    "    # Read rest of subnet database file and setup the bootp and DNS data.", 
    "", 
    "    my($a, $prev_ip, $ip, $eaddr, $cname, $mx, $comments, $lmod);", 
    "", 
    "    $prev_ip = ip2bin $base_ip;", 
    "    $last_ip = ~((split /\\./, $subnet_mask)[3] - 0) & 0xFF - 1;", 
    "    my $bip =  ip2bin($base_ip);", 
    "    $bip += $last_ip;", 
    "", 
    "    while (defined($_ = shift @$subnet_data)) {", 
    "\tlast if /__END__/;", 
    "\tnext if /^#/;", 
    "\tchomp;", 
    "\t($a, $ip, $eaddr, $cname, $mx, $comments, $lmod) = split /:/;", 
    "\tif (ip2bin($ip) ne ($prev_ip + 1)) {", 
    "\t    my $frog = ip2bin($ip) - 1;", 
    "\t    for (my $avail_ip = $prev_ip + 1; $avail_ip < ip2bin($ip);", 
    "\t\t $avail_ip++) {", 
    "\t\t$cw->build_avail($avail_ip);", 
    " ", 
    "\t    }", 
    "\t}", 
    "\t$lmod = time unless $lmod;", 
    "\t$cw->build_ip($a, $ip, $eaddr, $cname, $mx, $comments, $lmod);", 
    "\t$prev_ip = ip2bin $ip;", 
    "    }", 
    "", 
    "    # Insert trailing free IP numbers, except for 5% of the span for", 
    "    # network devices.", 
    "", 
    "    $last_ip = ip2bin($base_ip) + $last_ip - 1;", 
    "    my $pad = int( ($last_ip - ip2bin($base_ip)) * 0.05 );", 
    "    if ($prev_ip < $last_ip - $pad) {", 
    "\tfor (my $avail_ip = $prev_ip + 1; $avail_ip <= ", 
    "\t     $last_ip - $pad; $avail_ip++) {", 
    "\t    $cw->build_avail($avail_ip);", 
    "\t}", 
    "    }", 
    "", 
    "    $last_ip = bin2ip $last_ip;\t# at last, back to human form", 
    "    $cw->{Last_IP} = $last_ip;", 
    "", 
    "    $cw->Frame(qw/-height 20/)->grid;", 
    "    my $f2 = $cw->Frame(qw/-relief ridge -borderwidth 3/)->grid;", 
    "    my $label = $edit ? 'Search and Edit' : 'Search';", 
    "    $f2->Label(-text => $label)->grid(qw/-row 0 -column 0/);", 
    "    $f2->Label(-text => 'Free IPs')->grid(qw/-row 0 -column 1/);", 
    "    my $f3 = $f2->Frame(qw/-relief ridge -borderwidth 1/);", 
    "    $f3->grid(qw/-row 1  -column 0/);", 
    "", 
    "    my $lst = $f2->Scrolled(qw/Listbox -scrollbars w/);", 
    "    $lst->grid(qw/-row 1 -column 1 -rowspan 9/);", 
    "    $cw->{-LISTBOX} = $lst;", 
    "    foreach my $avail_ip (sort numerically keys %{$cw->{FreeIPs}}) {", 
    "\t$lst->insert('end', $avail_ip);", 
    "    }", 
    "    $lst->bind('<Double-1>' => [$cw => 'available']) if $edit;", 
    "    $balloon->attach($lst, -statusmsg => 'Double click to move a free IP to the Edit area.');", 
    "", 
    "    my $i = 0;", 
    "    foreach (@node_info) {", 
    "\tnext if /^Last_Mod/;", 
    "\tmy $le = $f3->LabEntry(-label => $_ . ' ' x (16-length $_),", 
    "\t\t\t       -labelPack => [qw/-side left -anchor w/],", 
    "\t\t\t       qw/-labelFont fixed/,", 
    "\t\t\t       -textvariable => \\$cw->{$_});", 
    "\t$le->grid(-row => $i, -column => 0);", 
    "\t$le->bind('<Return>' => [$cw => 'subnet_search', $_]);", 
    "\t$bh = $edit ? 'Make your changes and click Apply to update a node, or <Return> for a search.' : '<Return> to search.';", 
    "\t$balloon->attach($le, -statusmsg => $bh);", 
    "\t$i++;", 
    "    }", 
    "", 
    "    if ($edit) {", 
    "\tmy $f4 = $f3->Frame->grid(qw/-row 8 -column 0/);", 
    "\tmy $a = $f4->Button(qw/-text Apply/, -command => [$cw => 'apply']);", 
    "\t$a->grid(qw/-row 0 -column 0/);", 
    "\tmy $d =  $f4->Button(-text => 'Dynamic DHCP',", 
    "\t\t\t     -command => [$cw => 'dynamic']);", 
    "\t$d->grid(qw/-row 0 -column 1/);", 
    "\tmy $f = $f4->Button(qw/-text Free/, -command => [$cw => 'free']);", 
    "\t$f->grid(qw/-row 0 -column 2/);", 
    "\t$balloon->attach($a, -statusmsg => 'Apply node edits.');", 
    "\t$balloon->attach($d, -statusmsg => 'Preset dynamic DHCP information.');", 
    "\t$balloon->attach($f, -statusmsg => 'Release an IP to the free list.');", 
    "    }", 
    "", 
    "    my $status = $cw->Label(qw/-height 3 -wraplength 4i -font fixed/);", 
    "    $status->grid;", 
    "    $balloon->configure(-statusbar => $status);", 
    "    ", 
    "    $cw->Frame(qw/-height 20/)->grid;", 
    "    my $f5 = $cw->Frame(qw/-bg lightblue/)->grid;", 
    "    if ($edit) {", 
    "\t$bw = $f5->Button(-text => 'Update Subnet and Quit', ", 
    "\t\t\t  -command => [$cw => 'update_changes']);", 
    "\t$bw->grid(qw/-row 0 -column 0/);", 
    "\t$bh = $edit ? 'Save changes you made to one or more nodes and quit.' : ' ';", 
    "\t$balloon->attach($bw, -statusmsg => $bh);", 
    "    }", 
    "", 
    "    $label = $edit ? 'Cancel Changes and Quit' : 'Quit';", 
    "    $bw = $f5->Button(-text => $label, -command => [$cw => 'cancel_changes']);", 
    "    $bw->grid(qw/-row 0 -column 1/);", 
    "    $bh = $edit ? 'Quit without saving any node changes you might have made.' : ' ';", 
    "    $balloon->attach($bw, -statusmsg => $bh);", 
    "", 
    "    $cw->{-LAST_SEARCH_IDX} = 0;", 
    "    $cw->{Subnet_Changes} = 0;", 
    "", 
    "    $cw->deiconify;", 
    "", 
    "    $cw->ConfigSpecs(-title => ['METHOD', 'title', 'Title', $cw->{Title}]);", 
    "", 
    "    return $cw;", 
    "", 
    "} # end Populate, Subnet constructor", 
    "", 
    "sub title {", 
    "", 
    "    my($cw, $title) = @_;", 
    "    $cw->SUPER::title($title);", 
    "", 
    "} # end title", 
    "", 
    "sub apply {", 
    "    my($cw) = @_;", 
    "    if (not defined $cw->{IP_Address}) {", 
    "\t$cw->messageBox(-message => 'No IP.', -bitmap => 'error');", 
    "\treturn;", 
    "    }", 
    "    my $bip = ip2bin $cw->{IP_Address};", 
    "    if ($bip <= ip2bin $cw->{Base_IP} or $bip > ip2bin $cw->{Last_IP}) {", 
    "\t$cw->messageBox(-message => 'Invalid IP.', -bitmap => 'error');", 
    "\treturn;", 
    "    }", 
    "    my $found = 0;", 
    "    $cw->{Subnet_Changes}++;", 
    "", 
    "    my($a, $ip, $eaddr, $cname, $mx, $comments, $lmod);", 
    "    foreach my $hash_ref (@{$cw->{-SUBNET}}) {", 
    "        ($a, $ip, $eaddr, $cname, $mx, $comments, $lmod) =", 
    "\t    @{$hash_ref}{@node_info};", 
    "\tif ($ip eq $cw->{IP_Address}) {", 
    "\t    @{$hash_ref}{@node_info} = @{$cw}{@node_info};", 
    "\t    $hash_ref->{Last_Mod} =  time() . ' by ' . $cw->{Id};", 
    "\t    $found++;", 
    "\t    last;", 
    "\t}", 
    "    }", 
    "    if (not $found) {", 
    "\t$cw->build_ip(@{$cw}{@node_info});", 
    "\t# remove ip from listbox if its there, and remove from FreeIPs too.", 
    "#\tmy $index = my_lsearch $cw->{IP_Address}, $cw->{-LISTBOX}->get(qw/0 end/);", 
    "\tmy @frog =  $cw->{-LISTBOX}->get(qw/0 end/);", 
    "\tmy $index = lsearch \\@frog, $cw->{IP_Address};", 
    "\tif ($index >= 0) {", 
    "\t    $cw->{-LISTBOX}->delete($index);", 
    "\t    delete $cw->{FreeIPs}->{$cw->{IP_Address}};\t# keep parallel hash consistent", 
    "\t}", 
    "    }", 
    "} # end apply", 
    "", 
    "sub available {", 
    "    my($cw) = @_;", 
    "    my $lst = $cw->{-LISTBOX};", 
    "    $cw->{IP_Address} = $lst->get('active');", 
    "    $cw->{Ethernet_Address} = 'Manual';", 
    "    $cw->{'A'} = '';", 
    "    $cw->{CNAME} = '';", 
    "    $cw->{MX} = '';", 
    "    $cw->{Comments} = '';", 
    "    $lst->delete('active');", 
    "    delete $cw->{FreeIPs}->{$cw->{IP_Address}};\t# keep parallel hash consistent", 
    "}", 
    "", 
    "sub build_avail {", 
    "    my($cw, $ip) = @_;", 
    "    $cw->{FreeIPs}->{bin2ip($ip)} = '';", 
    "}", 
    "", 
    "sub build_ip {", 
    "    my($cw, $a, $ip, $eaddr, $cname, $mx, $comments, $lmod) = @_;", 
    "    push @{$cw->{-SUBNET}}, {'A' => $a, IP_Address => $ip,", 
    "\t\t\t     Ethernet_Address => $eaddr, CNAME => $cname,", 
    "\t\t\t     MX => $mx, Comments => $comments,", 
    "\t\t\t     Last_Mod => $lmod};", 
    "}", 
    "", 
    "sub cancel_changes {", 
    "    my($cw) = @_;", 
    "    if ($cw->{Subnet_Changes}) {", 
    "\treturn if 'No' eq $cw->messageBox(", 
    "            -message => 'Your changes will be lost - continue Cancel?',", 
    "\t    -bitmap  => 'question',", 
    "            -title   => 'Cancel Changes?',", 
    "\t    -type => 'YesNo');", 
    "    }", 
    "    $cw->{Cancelcmd}->();", 
    "    $cw->fini;", 
    "}", 
    "", 
    "sub dynamic {", 
    "    my($cw) = @_;", 
    "    if (not defined $cw->{IP_Address}) {", 
    "\t$cw->messageBox(-message => 'No IP.', -bitmap => 'error');", 
    "\treturn;", 
    "    }", 
    "    $cw->{Ethernet_Address} = 'Dynamic';", 
    "    my(@d) = split /\\./, $cw->{IP_Address};", 
    "    $cw->{'A'} = 'Dyn' . sprintf '%03d%03d', @d[2,3];", 
    "    $cw->{CNAME} = '';", 
    "    $cw->{MX} = '';", 
    "    $cw->{Comments} = 'Dynamic Address Pool';", 
    "} # end dynamic", 
    "", 
    "sub fini {", 
    "    my($cw) = @_;", 
    "    $cw->{Balloon}->destroy if defined $cw->{Balloon};", 
    "    foreach my $watch (@{$cw->{Watchpoints}}) {", 
    "\t$watch->Unwatch;", 
    "    }", 
    "    $cw->destroy;", 
    "} # end fini", 
    "", 
    "sub free {", 
    "    my($cw) = @_;", 
    "    if (not defined $cw->{IP_Address}) {", 
    "\t$cw->messageBox(-message => 'No IP.', -bitmap => 'error');", 
    "\treturn;", 
    "    }", 
    "    my $found = 0;", 
    "    my $splice = 0;", 
    "    $cw->{Subnet_Changes}++;", 
    "    my($a, $ip, $eaddr, $cname, $mx, $comments, $lmod);", 
    "    foreach my $hash_ref (@{$cw->{-SUBNET}}) {", 
    "        ($a, $ip, $eaddr, $cname, $mx, $comments, $lmod) = ", 
    "\t    @{$hash_ref}{@node_info};", 
    "\tif ($ip eq $cw->{IP_Address}) {", 
    "\t    splice @{$cw->{-SUBNET}}, $splice, 1;", 
    "\t    $found++;", 
    "\t    $cw->{FreeIPs}->{$cw->{IP_Address}} = '';", 
    "\t    my $lst = $cw->{-LISTBOX};", 
    "\t    $cw->Busy;", 
    "\t    $lst->delete(qw/0 end/);", 
    "\t    foreach my $avail_ip (sort numerically keys %{$cw->{FreeIPs}}) {", 
    "\t\t$lst->insert('end', $avail_ip);", 
    "\t    }", 
    "\t    $cw->Unbusy;", 
    "\t    foreach (@node_info) {$cw->{$_} = undef} # clear -textvariables", 
    "\t    last;", 
    "\t}", 
    "\t$splice++;", 
    "    }", 
    "    if (not $found) {", 
    "\t$cw->messageBox(-message => $cw->{IP_Address} . ' is already free.',", 
    "\t\t\t-bitmap => 'warning');", 
    "    }", 
    "} # end free", 
    "", 
    "sub numerically {", 
    "    my(@a2, @b2);", 
    "    @a2 = split /\\./, $a;", 
    "    @b2 = split /\\./, $b;", 
    "    $a2[3] <=> $b2[3];", 
    "}", 
    "", 
    "sub numerically2 {", 
    "    my(@a2, @b2);", 
    "    @a2 = split /\\./, $a->{IP_Address};", 
    "    @b2 = split /\\./, $b->{IP_Address};", 
    "    $a2[3] <=> $b2[3];", 
    "}", 
    "", 
    "sub subnet_search {", 
    "", 
    "    # Search the subnet using all the node keys.", 
    "", 
    "    my($cw, $attr) = @_;", 
    "    my $qattr = quotemeta $cw->{$attr};", 
    "    my $found = 0;", 
    "    my($i, $hash_ref);", 
    "", 
    "    foreach($i = $cw->{-LAST_SEARCH_IDX}; $i <= $#{@{$cw->{-SUBNET}}}; $i++) {", 
    "\t$hash_ref = (@{$cw->{-SUBNET}})[$i];", 
    "\tmy ($a, $ip, $eaddr, $cname, $mx, $comments, $lmod) =", 
    "\t    @{$hash_ref}{@node_info};", 
    "\tmy ($what) = $hash_ref->{$attr};", 
    "\tif ($what =~ /$qattr/i) {", 
    "\t    foreach my $attr (@node_info) {", 
    "\t\t$cw->{$attr} = $hash_ref->{$attr};", 
    "\t    }", 
    "\t    $found++;", 
    "\t    $cw->{-LAST_SEARCH_IDX} = $i < $#{@{$cw->{-SUBNET}}} ? $i + 1 : 0;", 
    "\t    last;", 
    "\t}", 
    "    }", 
    "    if (not $found) {", 
    "\t$cw->{-LAST_SEARCH_IDX} = 0;", 
    "\t$cw->bell unless $found;", 
    "    }", 
    "}", 
    "", 
    "sub update_changes {", 
    "    my($cw) = @_;", 
    "", 
    "    if (not $cw->{Subnet_Changes}) {", 
    "\t$cw->messageBox(-message => 'There are no subnet changes to update.',", 
    "\t\t\t-bitmap  => 'info',", 
    "\t\t\t-title   => 'Update Changes?');", 
    "    } else {", 
    "\tif ('Yes' eq $cw->messageBox(-message => 'Are you sure you want ' .", 
    "            'to update this subnet?',", 
    "\t\t\t\t     -bitmap  => 'question',", 
    "\t\t\t\t     -type    => 'YesNo',", 
    "\t\t\t\t     -title   => 'Update Changes?')) {", 
    "", 
    "\t    my $subnet_data = $cw->{Subnet_Data};", 
    "\t    @$subnet_data = ();", 
    "\t    push @$subnet_data, <<\"END\";", 
    "Title = $cw->{Title}", 
    "Domain = $cw->{Domain}", 
    "Base_IP = $cw->{Base_IP}", 
    "Subnet_Mask = $cw->{Subnet_Mask}", 
    "Gateway = $cw->{Gateway}", 
    "__NODES__", 
    "END", 
    "            foreach my $hash_ref (sort numerically2 @{$cw->{-SUBNET}}) {", 
    "\t\tmy ($a, $ip, $eaddr, $cname, $mx, $comments, $lmod) =", 
    "\t\t    @{$hash_ref}{@node_info};", 
    "\t\tif ($eaddr eq '' or $eaddr eq '0') {$eaddr = 'Manual'}", 
    "\t\tpush @$subnet_data, \"$a:$ip:$eaddr:$cname:$mx:$comments:$lmod\\n\";", 
    "\t    }", 
    "", 
    "\t    my @stat = $cw->{Updatecmd}->(); # send subnet data to daemon", 
    "", 
    "\t    if ($stat[0] =~ /Put Failed Lock Lost/) {", 
    "\t\t$cw->messageBox(-message => \"Your lock on the subnet was \" .", 
    "\t\t    \"lost.  You did have a lock, but it expired and was \" .", 
    "\t\t    \"lost.  To avoid loss of someone else's changes, your \" .", 
    "                    \"update has been trashed.  Sorry about that.\",", 
    "\t\t\t\t-bitmap  => 'error');", 
    "\t    } elsif ($stat[0] =~ /Pipe Error/) {", 
    "\t\t$cw->messageBox(-message => \"Your changes have been lost \" .", 
    "\t\t    \"because of a unknown pipe error.  Sorry about that.\",", 
    "\t\t\t\t-bitmap => 'error');", 
    "\t    } # ifend lost lock", 
    "\t} # ifend make changes", 
    "    } # ifend subnet changes", 
    "    $cw->fini;", 
    "", 
    "} # ifend update_changes", 
    "", 
    "# Private procedures.", 
    "", 
    "sub bin2ip {", 
    "    my($bin) = @_;", 
    "    $bin += 0;", 
    "    return ($bin >> 24) . '.' . ($bin >> 16 & 0xFF) . '.' .", 
    "\t($bin >> 8 & 0xFF) . '.' . ($bin & 0xFF);", 
    "}", 
    "", 
    "sub ip2bin {", 
    "    my($ip) = @_;", 
    "    my($d1, $d2, $d3, $d4) = split /\\./, $ip;", 
    "    return ($d1+0 << 24) | ($d2+0 << 16) | ($d3+0 << 8) | ($d4+0);", 
    "}", 
    "", 
    "1;!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}