{
  "keyboard_shortcut": "", 
  "name": "Administer IP Nodes", 
  "value": [
    "#!/usr/local/bin/perl -w", 
    "#", 
    "# ipadm - Administer IP nodes.", 
    "#", 
    "# S. O. Lidie, 1999/07/15", 
    "", 
    "use 5.005;", 
    "use Carp;", 
    "use IPADM;", 
    "use IO::Socket;", 
    "use Subnet;", 
    "use Tk;", 
    "use Tk::LabEntry;", 
    "use Tk::ROText;", 
    "use strict;", 
    "use vars qw/$HN $ME $MW $PID/;", 
    "use subs qw/do_command fini init ipsnd list_subnet open_subnet", 
    "    pipe_in pipe_out read_sdb start_ipc_helper/;", 
    "", 
    "init;", 
    "MainLoop;", 
    "fini;", 
    "", 
    "sub do_command {", 
    "", 
    "    # Issue a single IPADM command and wait for a reply.  Using", 
    "    # pipes and fileevent() allows X11 events to continue flowing.", 
    "", 
    "    pipe_out @_;", 
    "    return pipe_in;", 
    "", 
    "} # end do_command", 
    "", 
    "sub pipe_in {", 
    "", 
    "    # Now that the IPADM command has been issued, keep sysread-ing", 
    "    # until the $EOF string is read, and return all the accumulated", 
    "    # data, excluding $EOF.", 
    "", 
    "    my(@data, $sysbuf, $sysdata, $sysstat, $wait);", 
    "", 
    "    $MW->fileevent(\\*PR, 'readable' => sub {", 
    "", 
    "        print STDERR \"IN: about to sysread ...\\n\" if $DEBUG;\t\t       ", 
    "\tif ( $Tk::VERSION  le '800.015' ) {", 
    "\t    $sysbuf = <PR>;", 
    "\t    print STDERR \"IN: sysbuf=$sysbuf\\n\" if $DEBUG;", 
    "\t} else {", 
    "\t    $sysstat = sysread PR, $sysbuf, 4096;", 
    "\t    die \"ipadm: sysread error $!\" unless defined $sysstat;", 
    "\t    print STDERR \"IN: bytes=$sysstat\\n\" if $DEBUG;", 
    "\t}", 
    "\t$sysdata .= $sysbuf;", 
    "\tif ($sysdata =~ /$EOF$/s) {", 
    "\t    @data = split /\\n/, $sysdata;", 
    "\t    $#data--;\t\t# throw $EOF away", 
    "\t    $wait++;\t\t# unblock waitVariable()", 
    "\t}", 
    "", 
    "    });", 
    "", 
    "    $MW->waitVariable(\\$wait);", 
    "    $MW->fileevent(\\*PR, 'readable' => '');", 
    "    print STDERR \"IN: @data\\n\" if $DEBUG;", 
    "", 
    "    @data;", 
    "", 
    "} # end pipe_in", 
    "", 
    "sub pipe_out {", 
    "", 
    "    # Issue an IPADM command by syswrite-ing all the data plus", 
    "    # the terminating $EOF.", 
    "", 
    "    return unless defined $_[0];", 
    "", 
    "    my($bytes, $offset, $sysdata, $sysstat, $wait);", 
    "", 
    "    $sysdata = join '', @_, \"$EOF\\n\";", 
    "    $bytes = length $sysdata;", 
    "    $offset = 0;", 
    "", 
    "    $MW->fileevent(\\*PW, 'writable' => sub {", 
    "", 
    "\twhile ($bytes > 0) {", 
    "\t    $sysstat = syswrite PW, $sysdata, $bytes, $offset;", 
    "\t    die \"ipadm: syswrite error $!\" unless defined $sysstat;", 
    "\t    $bytes  -= $sysstat;", 
    "\t    $offset += $sysstat;", 
    "\t}", 
    "\t$wait++;", 
    "", 
    "    });", 
    "", 
    "    $MW->waitVariable(\\$wait);", 
    "    $MW->fileevent(\\*PW, 'writable' => '');", 
    "    print STDERR \"OT: $sysdata\\n\" if $DEBUG;", 
    "", 
    "} # end pipe_out", 
    "", 
    "sub fini {", 
    "    kill 'SIGTERM', $PID;", 
    "    exit;", 
    "}", 
    "", 
    "sub init {", 
    "", 
    "    $MW = MainWindow->new;", 
    "    $MW->title('ipadm - Administer IP Nodes');", 
    "    $MW->iconname('ipadm');", 
    "    $MW->minsize(50, 50);", 
    "    $MW->protocol('WM_DELETE_WINDOW' => \\&fini);", 
    "", 
    "    # Create the menubar and friends.", 
    "", 
    "    my $menubar = $MW->Menu; ", 
    "    $MW->configure(-menu => $menubar); ", 
    "", 
    "    my $file = $menubar->cascade(-label => '~File');", 
    "    my $edit = $menubar->cascade(-label => '~Edit'); ", 
    "    my $help = $menubar->cascade(-label => '~Help'); ", 
    "", 
    "    $file->command(-label => 'Quit', -command => \\&fini); ", 
    "    $edit->command(-label => 'Fast Find', -command => [$MW => 'bell']);", 
    "    $help->command(-label => 'About', -command => sub {", 
    "\t$MW->messageBox(-message => \"ipadm $VERSION\\n\\n99/07/15\")});", 
    "", 
    "    # Create the subnets table, a list of hypertext links, and some tags", 
    "    # to highlight the active entry and a binding to load a subnet.", 
    "", 
    "    my $t = $MW->Scrolled('ROText', ", 
    "        qw/-width 80 -height 10 -relief ridge -scrollbars w/);", 
    "    $t->pack(qw/-padx 5 -pady 3 -fill both -expand 1/);", 
    "", 
    "    $t->tagConfigure(qw/title -font/ => 'Helvetica 18 bold');", 
    "    $t->tagConfigure(qw/subnet -lmargin1 .5c -lmargin2 1c -foreground blue/);", 
    "    $t->tagConfigure(qw/hot -relief raised -borderwidth 1 -background green/);", 
    "", 
    "    start_ipc_helper;", 
    "", 
    "    $t->insert('end', \"\\n$ORGANIZATION\\n\\n\", ['title']);", 
    "", 
    "    # Get a list of subnets from ipadmd, sort the subnets by", 
    "    # IP number, and add the title string to the text widget,", 
    "    # tagged with the SDB file name.", 
    "", 
    "    my($status, @subnet_list) = do_command \"get_subnet_list\\n\";", 
    "    die \"Cannot get SDB list\" unless  $status =~ /OK/;", 
    "", 
    "    foreach (sort numerically @subnet_list) {", 
    "\tmy($sdb, $title) = /^(\\S+)\\s+(.*)/;", 
    "\t$t->insert('end', \"$title\\n\", ['subnet', $sdb]);", 
    "    }", 
    "", 
    "    $t->tagBind(qw/subnet <ButtonRelease-1>/ => \\&open_subnet);", 
    "", 
    "    my $last_hot = '';", 
    "    $t->tagBind(qw/subnet <Enter>/ => sub {", 
    "\tmy $text = shift;\t# SUBTLE STATEMENT HERE (-: ", 
    "\tmy($x, $y) = ($Tk::event->x, $Tk::event->y);", 
    "\t$last_hot = $text->index(\"\\@$x,$y linestart\");", 
    "\t$text->tagAdd('hot', $last_hot, \"$last_hot lineend\");", 
    "    });", 
    "    $t->tagBind(qw/subnet <Leave>/ => sub {", 
    "\tshift->tagRemove(qw/hot 1.0 end/);", 
    "    });", 
    "    $t->tagBind(qw/subnet <Motion>/ => sub {", 
    "\tmy $text = shift;", 
    "\tmy($x, $y) = ($Tk::event->x, $Tk::event->y);", 
    "\tmy $new_hot = $text->index(\"\\@$x,$y linestart\");", 
    "\tif ($new_hot ne $last_hot) {", 
    "\t    $text->tagRemove(qw/hot 1.0 end/);", 
    "\t    $text->tagAdd('hot', $new_hot, \"$new_hot lineend\");", 
    "\t    $last_hot = $new_hot;", 
    "\t}", 
    "    });", 
    "", 
    "    chomp($HN = `hostname`);", 
    "    $ME = getlogin;", 
    "", 
    "} # end init", 
    "", 
    "sub my_lsearch {                   # $o = lsearch $regexp, @list;", 
    "", 
    "    # Search the list using the supplied regular expression and return it's ", 
    "    # ordinal, or -1 if not found.", 
    "", 
    "    my($regexp, @list) = @_;", 
    "    my($i);", 
    "", 
    "    for ($i=0; $i<=$#list; $i++) {", 
    "        return $i if $list[$i] =~ /$regexp/;", 
    "    }", 
    "    return -1;", 
    "", 
    "} # end my_lsearch", 
    "", 
    "sub numerically {", 
    "    my($n1, $n2);", 
    "    ($n1) = $a =~ /Subnet_(\\d+)/;", 
    "    ($n2) = $b =~ /Subnet_(\\d+)/;", 
    "    if ($n1 != $n2) {", 
    "\t$n1 <=> $n2;", 
    "    } else {", 
    "\t$a cmp $b;", 
    "    }", 
    "}", 
    "", 
    "sub open_subnet {", 
    "", 
    "    # This procedure is called when the user clicks on a subnet hypertext link.", 
    "", 
    "    my($text) = @_;", 
    "", 
    "    my @tags = $text->tagNames('current');", 
    "    my $i = my_lsearch('.*\\.sdb', @tags);", 
    "    return if $i < 0;", 
    "    $text->Busy(-recurse => 1);", 
    "    my $id = \"$ME\\@$HN:$$\";", 
    "    my(@sdb) = do_command \"get_subnet_file $tags[$i] $id\\n\";", 
    "    if ($sdb[0] =~ /Have Lock|Lock Failed/) {", 
    "\t$text->Subnet(", 
    "            -sdb_path  => $tags[$i],", 
    "\t    -sdb       => \\@sdb,", 
    "\t    -id        => $id,", 
    "\t    -updatecmd => sub {do_command \"put_subnet_file $tags[$i] $id\\n\", @sdb},", 
    "            -cancelcmd => sub {do_command \"unl_subnet_file $tags[$i] $id\\n\"},", 
    "\t);", 
    "    } else {", 
    "\t$text->messageBox(-message => \"SDB Open Error: $sdb[0]\",", 
    "\t\t\t-type => 'ok', -bitmap => 'error');", 
    "    }", 
    "    $text->Unbusy;", 
    "", 
    "} # end open_subnet", 
    "", 
    "sub start_ipc_helper {", 
    "", 
    "    # Start a child process and use pipes to talk with it.  The child", 
    "    # uses sockets to talk to the remote IPADM daemon.", 
    "", 
    "    $SIG{PIPE} = sub {print STDERR \"ipadmh pipe failure.\\n\"; exit};", 
    "", 
    "    pipe CR, PW or die \"cr/pw pipe $!\";", 
    "    pipe PR, CW or die \"pr/cw pipe $!\";", 
    "", 
    "    if ($PID = fork) { # parent, ipadm/Tk", 
    "\tclose CR;", 
    "\tclose CW;", 
    "\tPW->autoflush(1);", 
    "    } elsif (defined $PID) { # child, exec ipadmh", 
    "\tclose PR;", 
    "\tclose PW;", 
    "\topen STDIN,  \"<&CR\" or die \"STDIN  open $!\";", 
    "\topen STDOUT, \">&CW\" or die \"STDOUT open $!\";", 
    "\topen STDERR, \">&CW\" or die \"STDERR open $!\";", 
    "\tSTDOUT->autoflush(1);", 
    "\tSTDERR->autoflush(1);", 
    "\texec(\"./ipadmh\", $DAEMON_HOST, $DAEMON_PORT) or die \"exec $!\";", 
    "\tdie \"exec warp $!\";", 
    "    } else {", 
    "\tdie \"fork $!\";", 
    "    } # ifend fork", 
    "", 
    "    my(@stat) = do_command undef;\t# did helper make a connection?", 
    "    return if $stat[0] =~ /Connect OK/;", 
    "", 
    "    $MW->messageBox(-message => \"Cannot connect to remote IPADM daemon \" .", 
    "\t\t    \"$DAEMON_HOST:$DAEMON_PORT.  Please try again later.\",", 
    "\t\t    -title => 'Daemon is Dead', -icon  => 'warning',", 
    "\t\t    -type => 'OK');", 
    "    fini;", 
    "", 
    "} # end start_ipc_helper!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}