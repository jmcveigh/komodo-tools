{
  "keyboard_shortcut": "", 
  "name": "Reading an Entire Line Without Blocking", 
  "value": [
    "$line = sysreadline(SOME_HANDLE);", 
    "", 
    "# OR ...", 
    "#line = sysreadline(SOME_HANDLE, TIMEOUT);", 
    "", 
    "# OR ...", 
    "use IO::Handle;", 
    "use IO::Select;", 
    "use Symbol qw(qualify_to_ref);", 
    "", 
    "sub sysreadline(*;$) {", 
    "\tmy ($handle, $timeout) = @_;", 
    "\t$handle = qualify_to_ref($handle, caller());", 
    "\tmy $infinitely_patient = (@_ == 1 || $timeout < 0);", 
    "\tmy $start_time = time();", 
    "\tmy $selector = IO::Select->new();", 
    "\t$selector->add($handle);", 
    "\tmy $line = \"\";", 
    "\t", 
    "SLEEP:", 
    "\tuntil (at_eol($line)) {", 
    "\t\tunless ($infinitely_patient) {", 
    "\t\t\treturn $line if time() > ($start_time + $timeout);", 
    "\t\t}", 
    "\t\t# sleep only 1 second before checking again", 
    "\t\tnext SLEEP unless $selector->can_read(1.0);", 
    "INPUT_READY:", 
    "\t\twhile ($selector->can_read(0.0)) {", 
    "\t\t\tmy $was_blocking = $handle->blocking(0);", 
    "CHAR:", 
    "\t\t\twhile(sysread($handle, my $nextbyte, 1)) {", 
    "\t\t\t\t$line .= $nextbyte;", 
    "\t\t\t\tlast CHAR if $nextbyte eq \"\\n\";", 
    "\t\t\t}", 
    "\t\t\t$handle->blocking($was_blocking);", 
    "\t\t\t# if incomkplete line, keep trying", 
    "\t\t\tnext SLEEP unless at_eol($line);", 
    "\t\t\tlast INPUT_READY;", 
    "\t\t}\t", 
    "\t}", 
    "\t", 
    "\treturn $line;", 
    "}", 
    "", 
    "sub at_eol($) { $_[0] =~ /\\n\\z/ }!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}