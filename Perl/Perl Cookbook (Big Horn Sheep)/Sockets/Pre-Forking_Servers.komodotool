{
  "keyboard_shortcut": "", 
  "name": "Pre-Forking Servers", 
  "value": [
    "#!/bin/perl", 
    "# preforker - server who forks first", 
    "use IO::Socket;", 
    "use Symbol;", 
    "use POSIX;", 
    "", 
    "# stablish SERVER socket, bind and listen.", 
    "$server = IO::Socket::INET->new(LocalPort => 6969,", 
    "\tType => SOCK_STREAM,", 
    "\tProto => 'tcp',", 
    "\tReuse => 1,", 
    "\tListen => 10 ) or die \"making socket: $@\\n\";", 
    "\t", 
    "# global variables", 
    "$PREFORK = 5; # number of children to maintain", 
    "$MAX_CLIENTS_PER_CHILD = 5; # number of clients each child should process", 
    "%children = (); # keys are current child process IDs", 
    "$children = 0; # current number of children", 
    "", 
    "sub REAPER {\t# takes care of dead children", 
    "\t$SIG{CHLD} = \\&REAPER;", 
    "\tmy $pid = wait;", 
    "\t$children--;", 
    "\tdelete $children($pid);", 
    "}", 
    "", 
    "sub HUNTSMAN { # signal handler for SIGINT", 
    "\tlocal($SIG{CHLD}) = 'IGNORE' # we're going to kill our children", 
    "\tkill 'INT' => keys %children;", 
    "\texit;", 
    "}", 
    "", 
    "# Fork off our children.", 
    "for (1 .. $PREFORK) {", 
    "\tmake_new_child();", 
    "}", 
    "", 
    "# Install signal handlers.", 
    "$SIG{CHLD} = \\&REAPER;", 
    "$SIG{INT} = \\&HUNTSMAN;", 
    "", 
    "# And maintain the population.", 
    "while (1) {", 
    "\tsleep; # wait for a signal (i.e., child's death)", 
    "\tfor ($i = $children; $i < $PREFORK; $i++) {", 
    "\t\tmake_new_child(); # top up the child pool", 
    "\t}", 
    "}", 
    "", 
    "sub make_new_child {", 
    "\tmy $pid;", 
    "\tmy $sigset;", 
    "\t", 
    "\t# blocks signal for fork", 
    "\t$sigset = POSIX::SigSet->new(SIGINT);", 
    "\tsigprocmask(SIG_BLOCK, $sigset) or die \"Can't block SIGINT for fork: $!\\n\";", 
    "\t", 
    "\tdie \"fork: $!\" unless defined ($pid = fork);", 
    "\t", 
    "\tif ($pid) {", 
    "\t\t# Parent records the child's birth and returns.", 
    "\t\tsigprocmask(SIG_UNBLOCK, $sigset) or die \"Can't unblock SIGINT for fork: $!\\n\";", 
    "\t\t$children{$pid} = 1;", 
    "\t\t$children++;", 
    "\t\treturn;", 
    "\t} else {", 
    "\t\t# Child can *not* return from this subroutine.", 
    "\t\t$SIG{INT} = 'DEFAULT'; $ make SIGINT kill us as it did before", 
    "\t\t", 
    "\t\t# unblock signals", 
    "\t\tsigprocmask(SIG_UNBLOCK, $sigset) or die \"Can't unblock SIGINT for fork: $!\\n\";", 
    "\t\t", 
    "\t\t# handle connections until we've reached $MAX_CLIENTS_PER_CHILD", 
    "\t\tfor($i = 0; $i < MAX_CLIENTS_PER_CHILD; $i++) {", 
    "\t\t\t$client = $server->accept() or last;", 
    "\t\t\t# do something with the connection", 
    "\t\t}", 
    "\t\t", 
    "\t\t# tidy up gracefully and finish", 
    "", 
    "\t\t# this exit is VERY important, otherwise the child will become", 
    "\t\t# a producer of more and more children, forking yourself into", 
    "\t\t# process death", 
    "\t\t", 
    "\t\texit;", 
    "\t}", 
    "}!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "false", 
  "type": "snippet", 
  "indent_relative": "false", 
  "auto_abbreviation": "false"
}